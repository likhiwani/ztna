// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.12
// source: edge_ctrl.proto

package edge_ctrl_pb

import (
	"ztna-core/ztna/logtrace"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContentType int32

const (
	ContentType_Zero            ContentType = 0
	ContentType_ServerHelloType ContentType = 20000
	ContentType_ClientHelloType ContentType = 20001
	ContentType_ErrorType       ContentType = 20002
	// SessionAddedType = 20100;
	// SessionUpdatedType = 20101;
	ContentType_SessionRemovedType                      ContentType = 20102
	ContentType_ApiSessionAddedType                     ContentType = 20200
	ContentType_ApiSessionUpdatedType                   ContentType = 20201
	ContentType_ApiSessionRemovedType                   ContentType = 20202
	ContentType_ApiSessionHeartbeatType                 ContentType = 20203
	ContentType_RequestClientReSyncType                 ContentType = 20204
	ContentType_CreateCircuitRequestType                ContentType = 20205
	ContentType_CreateCircuitResponseType               ContentType = 20206
	ContentType_CreateTerminatorRequestType             ContentType = 20207
	ContentType_CreateTerminatorResponseType            ContentType = 20208
	ContentType_UpdateTerminatorRequestType             ContentType = 20209
	ContentType_UpdateTerminatorResponseType            ContentType = 20210
	ContentType_RemoveTerminatorRequestType             ContentType = 20211
	ContentType_RemoveTerminatorResponseType            ContentType = 20212
	ContentType_ValidateSessionsRequestType             ContentType = 20213
	ContentType_HealthEventType                         ContentType = 20214
	ContentType_CreateTerminatorV2RequestType           ContentType = 20216
	ContentType_CreateTerminatorV2ResponseType          ContentType = 20217
	ContentType_CreateCircuitV2RequestType              ContentType = 20218
	ContentType_CreateCircuitV2ResponseType             ContentType = 20219
	ContentType_CreateTunnelCircuitV2RequestType        ContentType = 20220
	ContentType_CreateTunnelCircuitV2ResponseType       ContentType = 20221
	ContentType_EnrollType                              ContentType = 20300
	ContentType_EnrollmentCertsResponseType             ContentType = 20301
	ContentType_EnrollmentExtendRouterRequestType       ContentType = 20302
	ContentType_EnrollmentExtendRouterVerifyRequestType ContentType = 20303
	ContentType_CreateApiSessionRequestType             ContentType = 20400
	ContentType_CreateApiSessionResponseType            ContentType = 20401
	ContentType_CreateCircuitForServiceRequestType      ContentType = 20402
	ContentType_CreateCircuitForServiceResponseType     ContentType = 20403
	ContentType_ListServicesRequestType                 ContentType = 20404
	ContentType_ServiceListType                         ContentType = 20405
	ContentType_CreateTunnelTerminatorRequestType       ContentType = 20406
	ContentType_CreateTunnelTerminatorResponseType      ContentType = 20407
	ContentType_UpdateTunnelTerminatorRequestType       ContentType = 20408
	ContentType_UpdateTunnelTerminatorResponseType      ContentType = 20409
	ContentType_RemoveTunnelTerminatorRequestType       ContentType = 20410
	ContentType_RemoveTunnelTerminatorResponseType      ContentType = 20411
	ContentType_TunnelHealthEventType                   ContentType = 20412
	ContentType_CreateTunnelTerminatorRequestV2Type     ContentType = 20413
	ContentType_CreateTunnelTerminatorResponseV2Type    ContentType = 20414
	ContentType_ConnectEventsTypes                      ContentType = 20415
	ContentType_DataStateType                           ContentType = 20500
	ContentType_DataStateChangeSetType                  ContentType = 20501
	ContentType_UpdateTokenType                         ContentType = 20502
	ContentType_ValidateDataStateRequestType            ContentType = 20503
	ContentType_ValidateDataStateResponseType           ContentType = 20504
	ContentType_SubscribeToDataModelRequestType         ContentType = 20505
	ContentType_CurrentIndexMessageType                 ContentType = 20506
)

// Enum value maps for ContentType.
var (
	ContentType_name = map[int32]string{
		0:     "Zero",
		20000: "ServerHelloType",
		20001: "ClientHelloType",
		20002: "ErrorType",
		20102: "SessionRemovedType",
		20200: "ApiSessionAddedType",
		20201: "ApiSessionUpdatedType",
		20202: "ApiSessionRemovedType",
		20203: "ApiSessionHeartbeatType",
		20204: "RequestClientReSyncType",
		20205: "CreateCircuitRequestType",
		20206: "CreateCircuitResponseType",
		20207: "CreateTerminatorRequestType",
		20208: "CreateTerminatorResponseType",
		20209: "UpdateTerminatorRequestType",
		20210: "UpdateTerminatorResponseType",
		20211: "RemoveTerminatorRequestType",
		20212: "RemoveTerminatorResponseType",
		20213: "ValidateSessionsRequestType",
		20214: "HealthEventType",
		20216: "CreateTerminatorV2RequestType",
		20217: "CreateTerminatorV2ResponseType",
		20218: "CreateCircuitV2RequestType",
		20219: "CreateCircuitV2ResponseType",
		20220: "CreateTunnelCircuitV2RequestType",
		20221: "CreateTunnelCircuitV2ResponseType",
		20300: "EnrollType",
		20301: "EnrollmentCertsResponseType",
		20302: "EnrollmentExtendRouterRequestType",
		20303: "EnrollmentExtendRouterVerifyRequestType",
		20400: "CreateApiSessionRequestType",
		20401: "CreateApiSessionResponseType",
		20402: "CreateCircuitForServiceRequestType",
		20403: "CreateCircuitForServiceResponseType",
		20404: "ListServicesRequestType",
		20405: "ServiceListType",
		20406: "CreateTunnelTerminatorRequestType",
		20407: "CreateTunnelTerminatorResponseType",
		20408: "UpdateTunnelTerminatorRequestType",
		20409: "UpdateTunnelTerminatorResponseType",
		20410: "RemoveTunnelTerminatorRequestType",
		20411: "RemoveTunnelTerminatorResponseType",
		20412: "TunnelHealthEventType",
		20413: "CreateTunnelTerminatorRequestV2Type",
		20414: "CreateTunnelTerminatorResponseV2Type",
		20415: "ConnectEventsTypes",
		20500: "DataStateType",
		20501: "DataStateChangeSetType",
		20502: "UpdateTokenType",
		20503: "ValidateDataStateRequestType",
		20504: "ValidateDataStateResponseType",
		20505: "SubscribeToDataModelRequestType",
		20506: "CurrentIndexMessageType",
	}
	ContentType_value = map[string]int32{
		"Zero":                                    0,
		"ServerHelloType":                         20000,
		"ClientHelloType":                         20001,
		"ErrorType":                               20002,
		"SessionRemovedType":                      20102,
		"ApiSessionAddedType":                     20200,
		"ApiSessionUpdatedType":                   20201,
		"ApiSessionRemovedType":                   20202,
		"ApiSessionHeartbeatType":                 20203,
		"RequestClientReSyncType":                 20204,
		"CreateCircuitRequestType":                20205,
		"CreateCircuitResponseType":               20206,
		"CreateTerminatorRequestType":             20207,
		"CreateTerminatorResponseType":            20208,
		"UpdateTerminatorRequestType":             20209,
		"UpdateTerminatorResponseType":            20210,
		"RemoveTerminatorRequestType":             20211,
		"RemoveTerminatorResponseType":            20212,
		"ValidateSessionsRequestType":             20213,
		"HealthEventType":                         20214,
		"CreateTerminatorV2RequestType":           20216,
		"CreateTerminatorV2ResponseType":          20217,
		"CreateCircuitV2RequestType":              20218,
		"CreateCircuitV2ResponseType":             20219,
		"CreateTunnelCircuitV2RequestType":        20220,
		"CreateTunnelCircuitV2ResponseType":       20221,
		"EnrollType":                              20300,
		"EnrollmentCertsResponseType":             20301,
		"EnrollmentExtendRouterRequestType":       20302,
		"EnrollmentExtendRouterVerifyRequestType": 20303,
		"CreateApiSessionRequestType":             20400,
		"CreateApiSessionResponseType":            20401,
		"CreateCircuitForServiceRequestType":      20402,
		"CreateCircuitForServiceResponseType":     20403,
		"ListServicesRequestType":                 20404,
		"ServiceListType":                         20405,
		"CreateTunnelTerminatorRequestType":       20406,
		"CreateTunnelTerminatorResponseType":      20407,
		"UpdateTunnelTerminatorRequestType":       20408,
		"UpdateTunnelTerminatorResponseType":      20409,
		"RemoveTunnelTerminatorRequestType":       20410,
		"RemoveTunnelTerminatorResponseType":      20411,
		"TunnelHealthEventType":                   20412,
		"CreateTunnelTerminatorRequestV2Type":     20413,
		"CreateTunnelTerminatorResponseV2Type":    20414,
		"ConnectEventsTypes":                      20415,
		"DataStateType":                           20500,
		"DataStateChangeSetType":                  20501,
		"UpdateTokenType":                         20502,
		"ValidateDataStateRequestType":            20503,
		"ValidateDataStateResponseType":           20504,
		"SubscribeToDataModelRequestType":         20505,
		"CurrentIndexMessageType":                 20506,
	}
)

func (x ContentType) Enum() *ContentType {
    logtrace.LogWithFunctionName()
	p := new(ContentType)
	*p = x
	return p
}

func (x ContentType) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContentType) Descriptor() protoreflect.EnumDescriptor {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_enumTypes[0].Descriptor()
}

func (ContentType) Type() protoreflect.EnumType {
    logtrace.LogWithFunctionName()
	return &file_edge_ctrl_proto_enumTypes[0]
}

func (x ContentType) Number() protoreflect.EnumNumber {
    logtrace.LogWithFunctionName()
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContentType.Descriptor instead.
func (ContentType) EnumDescriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{0}
}

type SessionType int32

const (
	SessionType_Dial SessionType = 0
	SessionType_Bind SessionType = 1
)

// Enum value maps for SessionType.
var (
	SessionType_name = map[int32]string{
		0: "Dial",
		1: "Bind",
	}
	SessionType_value = map[string]int32{
		"Dial": 0,
		"Bind": 1,
	}
)

func (x SessionType) Enum() *SessionType {
    logtrace.LogWithFunctionName()
	p := new(SessionType)
	*p = x
	return p
}

func (x SessionType) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SessionType) Descriptor() protoreflect.EnumDescriptor {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_enumTypes[1].Descriptor()
}

func (SessionType) Type() protoreflect.EnumType {
    logtrace.LogWithFunctionName()
	return &file_edge_ctrl_proto_enumTypes[1]
}

func (x SessionType) Number() protoreflect.EnumNumber {
    logtrace.LogWithFunctionName()
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SessionType.Descriptor instead.
func (SessionType) EnumDescriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{1}
}

type Header int32

const (
	Header_HeaderZero           Header = 0
	Header_TerminatorId         Header = 1022
	Header_CheckPassed          Header = 1023
	Header_RouterDataModel      Header = 1024
	Header_RouterDataModelIndex Header = 1025
)

// Enum value maps for Header.
var (
	Header_name = map[int32]string{
		0:    "HeaderZero",
		1022: "TerminatorId",
		1023: "CheckPassed",
		1024: "RouterDataModel",
		1025: "RouterDataModelIndex",
	}
	Header_value = map[string]int32{
		"HeaderZero":           0,
		"TerminatorId":         1022,
		"CheckPassed":          1023,
		"RouterDataModel":      1024,
		"RouterDataModelIndex": 1025,
	}
)

func (x Header) Enum() *Header {
    logtrace.LogWithFunctionName()
	p := new(Header)
	*p = x
	return p
}

func (x Header) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Header) Descriptor() protoreflect.EnumDescriptor {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_enumTypes[2].Descriptor()
}

func (Header) Type() protoreflect.EnumType {
    logtrace.LogWithFunctionName()
	return &file_edge_ctrl_proto_enumTypes[2]
}

func (x Header) Number() protoreflect.EnumNumber {
    logtrace.LogWithFunctionName()
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Header.Descriptor instead.
func (Header) EnumDescriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{2}
}

type PolicyType int32

const (
	PolicyType_InvalidPolicy PolicyType = 0
	PolicyType_DialPolicy    PolicyType = 1
	PolicyType_BindPolicy    PolicyType = 2
)

// Enum value maps for PolicyType.
var (
	PolicyType_name = map[int32]string{
		0: "InvalidPolicy",
		1: "DialPolicy",
		2: "BindPolicy",
	}
	PolicyType_value = map[string]int32{
		"InvalidPolicy": 0,
		"DialPolicy":    1,
		"BindPolicy":    2,
	}
)

func (x PolicyType) Enum() *PolicyType {
    logtrace.LogWithFunctionName()
	p := new(PolicyType)
	*p = x
	return p
}

func (x PolicyType) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyType) Descriptor() protoreflect.EnumDescriptor {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_enumTypes[3].Descriptor()
}

func (PolicyType) Type() protoreflect.EnumType {
    logtrace.LogWithFunctionName()
	return &file_edge_ctrl_proto_enumTypes[3]
}

func (x PolicyType) Number() protoreflect.EnumNumber {
    logtrace.LogWithFunctionName()
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyType.Descriptor instead.
func (PolicyType) EnumDescriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{3}
}

type ServicePolicyRelatedEntityType int32

const (
	ServicePolicyRelatedEntityType_InvalidRelatedType  ServicePolicyRelatedEntityType = 0
	ServicePolicyRelatedEntityType_RelatedService      ServicePolicyRelatedEntityType = 1
	ServicePolicyRelatedEntityType_RelatedIdentity     ServicePolicyRelatedEntityType = 2
	ServicePolicyRelatedEntityType_RelatedPostureCheck ServicePolicyRelatedEntityType = 3
)

// Enum value maps for ServicePolicyRelatedEntityType.
var (
	ServicePolicyRelatedEntityType_name = map[int32]string{
		0: "InvalidRelatedType",
		1: "RelatedService",
		2: "RelatedIdentity",
		3: "RelatedPostureCheck",
	}
	ServicePolicyRelatedEntityType_value = map[string]int32{
		"InvalidRelatedType":  0,
		"RelatedService":      1,
		"RelatedIdentity":     2,
		"RelatedPostureCheck": 3,
	}
)

func (x ServicePolicyRelatedEntityType) Enum() *ServicePolicyRelatedEntityType {
    logtrace.LogWithFunctionName()
	p := new(ServicePolicyRelatedEntityType)
	*p = x
	return p
}

func (x ServicePolicyRelatedEntityType) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServicePolicyRelatedEntityType) Descriptor() protoreflect.EnumDescriptor {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_enumTypes[4].Descriptor()
}

func (ServicePolicyRelatedEntityType) Type() protoreflect.EnumType {
    logtrace.LogWithFunctionName()
	return &file_edge_ctrl_proto_enumTypes[4]
}

func (x ServicePolicyRelatedEntityType) Number() protoreflect.EnumNumber {
    logtrace.LogWithFunctionName()
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServicePolicyRelatedEntityType.Descriptor instead.
func (ServicePolicyRelatedEntityType) EnumDescriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{4}
}

type TerminatorPrecedence int32

const (
	TerminatorPrecedence_Default  TerminatorPrecedence = 0
	TerminatorPrecedence_Required TerminatorPrecedence = 1
	TerminatorPrecedence_Failed   TerminatorPrecedence = 2
)

// Enum value maps for TerminatorPrecedence.
var (
	TerminatorPrecedence_name = map[int32]string{
		0: "Default",
		1: "Required",
		2: "Failed",
	}
	TerminatorPrecedence_value = map[string]int32{
		"Default":  0,
		"Required": 1,
		"Failed":   2,
	}
)

func (x TerminatorPrecedence) Enum() *TerminatorPrecedence {
    logtrace.LogWithFunctionName()
	p := new(TerminatorPrecedence)
	*p = x
	return p
}

func (x TerminatorPrecedence) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TerminatorPrecedence) Descriptor() protoreflect.EnumDescriptor {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_enumTypes[5].Descriptor()
}

func (TerminatorPrecedence) Type() protoreflect.EnumType {
    logtrace.LogWithFunctionName()
	return &file_edge_ctrl_proto_enumTypes[5]
}

func (x TerminatorPrecedence) Number() protoreflect.EnumNumber {
    logtrace.LogWithFunctionName()
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TerminatorPrecedence.Descriptor instead.
func (TerminatorPrecedence) EnumDescriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5}
}

type CreateTerminatorResult int32

const (
	CreateTerminatorResult_Success              CreateTerminatorResult = 0
	CreateTerminatorResult_FailedIdConflict     CreateTerminatorResult = 1
	CreateTerminatorResult_FailedOther          CreateTerminatorResult = 2
	CreateTerminatorResult_FailedBusy           CreateTerminatorResult = 3
	CreateTerminatorResult_FailedInvalidSession CreateTerminatorResult = 4
)

// Enum value maps for CreateTerminatorResult.
var (
	CreateTerminatorResult_name = map[int32]string{
		0: "Success",
		1: "FailedIdConflict",
		2: "FailedOther",
		3: "FailedBusy",
		4: "FailedInvalidSession",
	}
	CreateTerminatorResult_value = map[string]int32{
		"Success":              0,
		"FailedIdConflict":     1,
		"FailedOther":          2,
		"FailedBusy":           3,
		"FailedInvalidSession": 4,
	}
)

func (x CreateTerminatorResult) Enum() *CreateTerminatorResult {
    logtrace.LogWithFunctionName()
	p := new(CreateTerminatorResult)
	*p = x
	return p
}

func (x CreateTerminatorResult) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CreateTerminatorResult) Descriptor() protoreflect.EnumDescriptor {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_enumTypes[6].Descriptor()
}

func (CreateTerminatorResult) Type() protoreflect.EnumType {
    logtrace.LogWithFunctionName()
	return &file_edge_ctrl_proto_enumTypes[6]
}

func (x CreateTerminatorResult) Number() protoreflect.EnumNumber {
    logtrace.LogWithFunctionName()
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CreateTerminatorResult.Descriptor instead.
func (CreateTerminatorResult) EnumDescriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{6}
}

type DataState_Action int32

const (
	DataState_Create DataState_Action = 0
	DataState_Update DataState_Action = 1
	DataState_Delete DataState_Action = 2
)

// Enum value maps for DataState_Action.
var (
	DataState_Action_name = map[int32]string{
		0: "Create",
		1: "Update",
		2: "Delete",
	}
	DataState_Action_value = map[string]int32{
		"Create": 0,
		"Update": 1,
		"Delete": 2,
	}
)

func (x DataState_Action) Enum() *DataState_Action {
    logtrace.LogWithFunctionName()
	p := new(DataState_Action)
	*p = x
	return p
}

func (x DataState_Action) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataState_Action) Descriptor() protoreflect.EnumDescriptor {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_enumTypes[7].Descriptor()
}

func (DataState_Action) Type() protoreflect.EnumType {
    logtrace.LogWithFunctionName()
	return &file_edge_ctrl_proto_enumTypes[7]
}

func (x DataState_Action) Number() protoreflect.EnumNumber {
    logtrace.LogWithFunctionName()
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataState_Action.Descriptor instead.
func (DataState_Action) EnumDescriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 0}
}

type DataState_PublicKey_Usage int32

const (
	DataState_PublicKey_JWTValidation            DataState_PublicKey_Usage = 0
	DataState_PublicKey_ClientX509CertValidation DataState_PublicKey_Usage = 1
)

// Enum value maps for DataState_PublicKey_Usage.
var (
	DataState_PublicKey_Usage_name = map[int32]string{
		0: "JWTValidation",
		1: "ClientX509CertValidation",
	}
	DataState_PublicKey_Usage_value = map[string]int32{
		"JWTValidation":            0,
		"ClientX509CertValidation": 1,
	}
)

func (x DataState_PublicKey_Usage) Enum() *DataState_PublicKey_Usage {
    logtrace.LogWithFunctionName()
	p := new(DataState_PublicKey_Usage)
	*p = x
	return p
}

func (x DataState_PublicKey_Usage) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataState_PublicKey_Usage) Descriptor() protoreflect.EnumDescriptor {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_enumTypes[8].Descriptor()
}

func (DataState_PublicKey_Usage) Type() protoreflect.EnumType {
    logtrace.LogWithFunctionName()
	return &file_edge_ctrl_proto_enumTypes[8]
}

func (x DataState_PublicKey_Usage) Number() protoreflect.EnumNumber {
    logtrace.LogWithFunctionName()
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataState_PublicKey_Usage.Descriptor instead.
func (DataState_PublicKey_Usage) EnumDescriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 10, 0}
}

type DataState_PublicKey_Format int32

const (
	DataState_PublicKey_X509CertDer   DataState_PublicKey_Format = 0 //x509 cert
	DataState_PublicKey_PKIXPublicKey DataState_PublicKey_Format = 1 //asn.1 public key
)

// Enum value maps for DataState_PublicKey_Format.
var (
	DataState_PublicKey_Format_name = map[int32]string{
		0: "X509CertDer",
		1: "PKIXPublicKey",
	}
	DataState_PublicKey_Format_value = map[string]int32{
		"X509CertDer":   0,
		"PKIXPublicKey": 1,
	}
)

func (x DataState_PublicKey_Format) Enum() *DataState_PublicKey_Format {
    logtrace.LogWithFunctionName()
	p := new(DataState_PublicKey_Format)
	*p = x
	return p
}

func (x DataState_PublicKey_Format) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataState_PublicKey_Format) Descriptor() protoreflect.EnumDescriptor {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_enumTypes[9].Descriptor()
}

func (DataState_PublicKey_Format) Type() protoreflect.EnumType {
    logtrace.LogWithFunctionName()
	return &file_edge_ctrl_proto_enumTypes[9]
}

func (x DataState_PublicKey_Format) Number() protoreflect.EnumNumber {
    logtrace.LogWithFunctionName()
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataState_PublicKey_Format.Descriptor instead.
func (DataState_PublicKey_Format) EnumDescriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 10, 1}
}

type ServerHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  string            `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Data     map[string]string `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ByteData map[string][]byte `protobuf:"bytes,3,rep,name=byteData,proto3" json:"byteData,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ServerHello) Reset() {
    logtrace.LogWithFunctionName()
	*x = ServerHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerHello) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerHello) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *ServerHello) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerHello.ProtoReflect.Descriptor instead.
func (*ServerHello) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{0}
}

func (x *ServerHello) GetVersion() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServerHello) GetData() map[string]string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ServerHello) GetByteData() map[string][]byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ByteData
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value    string `protobuf:"bytes,10,opt,name=value,proto3" json:"value,omitempty"`
	Protocol string `protobuf:"bytes,20,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Hostname string `protobuf:"bytes,30,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port     int32  `protobuf:"varint,40,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Address) Reset() {
    logtrace.LogWithFunctionName()
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *Address) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{1}
}

func (x *Address) GetValue() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Address) GetProtocol() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Address) GetHostname() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Address) GetPort() int32 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Port
	}
	return 0
}

type Listener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   *Address `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
	Advertise *Address `protobuf:"bytes,20,opt,name=advertise,proto3" json:"advertise,omitempty"`
}

func (x *Listener) Reset() {
    logtrace.LogWithFunctionName()
	*x = Listener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listener) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*Listener) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *Listener) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listener.ProtoReflect.Descriptor instead.
func (*Listener) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{2}
}

func (x *Listener) GetAddress() *Address {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *Listener) GetAdvertise() *Address {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Advertise
	}
	return nil
}

type ClientHello struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version  string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// deprecated used listeners instead
	Protocols []string `protobuf:"bytes,3,rep,name=protocols,proto3" json:"protocols,omitempty"`
	// arbitrary data
	Data map[string]string `protobuf:"bytes,4,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// deprecated use listeners instead
	ProtocolPorts []string `protobuf:"bytes,5,rep,name=protocolPorts,proto3" json:"protocolPorts,omitempty"`
	// an array of configured edge listeners
	Listeners []*Listener `protobuf:"bytes,10,rep,name=listeners,proto3" json:"listeners,omitempty"`
}

func (x *ClientHello) Reset() {
    logtrace.LogWithFunctionName()
	*x = ClientHello{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientHello) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientHello) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *ClientHello) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientHello.ProtoReflect.Descriptor instead.
func (*ClientHello) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{3}
}

func (x *ClientHello) GetVersion() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClientHello) GetHostname() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ClientHello) GetProtocols() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Protocols
	}
	return nil
}

func (x *ClientHello) GetData() map[string]string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ClientHello) GetProtocolPorts() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ProtocolPorts
	}
	return nil
}

func (x *ClientHello) GetListeners() []*Listener {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Listeners
	}
	return nil
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Cause   string `protobuf:"bytes,3,opt,name=cause,proto3" json:"cause,omitempty"`
}

func (x *Error) Reset() {
    logtrace.LogWithFunctionName()
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *Error) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{4}
}

func (x *Error) GetCode() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Error) GetMessage() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetCause() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Cause
	}
	return ""
}

type DataState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events   []*DataState_Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	EndIndex uint64             `protobuf:"varint,2,opt,name=endIndex,proto3" json:"endIndex,omitempty"`
}

func (x *DataState) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState.ProtoReflect.Descriptor instead.
func (*DataState) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5}
}

func (x *DataState) GetEvents() []*DataState_Event {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *DataState) GetEndIndex() uint64 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.EndIndex
	}
	return 0
}

type ApiSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token            string   `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	CertFingerprints []string `protobuf:"bytes,2,rep,name=certFingerprints,proto3" json:"certFingerprints,omitempty"`
	Id               string   `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	IdentityId       string   `protobuf:"bytes,4,opt,name=identityId,proto3" json:"identityId,omitempty"`
}

func (x *ApiSession) Reset() {
    logtrace.LogWithFunctionName()
	*x = ApiSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiSession) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiSession) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *ApiSession) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiSession.ProtoReflect.Descriptor instead.
func (*ApiSession) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{6}
}

func (x *ApiSession) GetToken() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ApiSession) GetCertFingerprints() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.CertFingerprints
	}
	return nil
}

func (x *ApiSession) GetId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApiSession) GetIdentityId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.IdentityId
	}
	return ""
}

type ApiSessionAdded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsFullState bool          `protobuf:"varint,1,opt,name=isFullState,proto3" json:"isFullState,omitempty"`
	ApiSessions []*ApiSession `protobuf:"bytes,2,rep,name=apiSessions,proto3" json:"apiSessions,omitempty"`
}

func (x *ApiSessionAdded) Reset() {
    logtrace.LogWithFunctionName()
	*x = ApiSessionAdded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiSessionAdded) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiSessionAdded) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *ApiSessionAdded) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiSessionAdded.ProtoReflect.Descriptor instead.
func (*ApiSessionAdded) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{7}
}

func (x *ApiSessionAdded) GetIsFullState() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.IsFullState
	}
	return false
}

func (x *ApiSessionAdded) GetApiSessions() []*ApiSession {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ApiSessions
	}
	return nil
}

type ApiSessionUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiSessions []*ApiSession `protobuf:"bytes,1,rep,name=apiSessions,proto3" json:"apiSessions,omitempty"`
}

func (x *ApiSessionUpdated) Reset() {
    logtrace.LogWithFunctionName()
	*x = ApiSessionUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiSessionUpdated) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiSessionUpdated) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *ApiSessionUpdated) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiSessionUpdated.ProtoReflect.Descriptor instead.
func (*ApiSessionUpdated) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{8}
}

func (x *ApiSessionUpdated) GetApiSessions() []*ApiSession {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ApiSessions
	}
	return nil
}

type ApiSessionRemoved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []string `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	Ids    []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ApiSessionRemoved) Reset() {
    logtrace.LogWithFunctionName()
	*x = ApiSessionRemoved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiSessionRemoved) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiSessionRemoved) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *ApiSessionRemoved) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiSessionRemoved.ProtoReflect.Descriptor instead.
func (*ApiSessionRemoved) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{9}
}

func (x *ApiSessionRemoved) GetTokens() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *ApiSessionRemoved) GetIds() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Ids
	}
	return nil
}

type ApiSessionHeartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []string `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *ApiSessionHeartbeat) Reset() {
    logtrace.LogWithFunctionName()
	*x = ApiSessionHeartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiSessionHeartbeat) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiSessionHeartbeat) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *ApiSessionHeartbeat) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiSessionHeartbeat.ProtoReflect.Descriptor instead.
func (*ApiSessionHeartbeat) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{10}
}

func (x *ApiSessionHeartbeat) GetTokens() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Tokens
	}
	return nil
}

type SessionRemoved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tokens []string `protobuf:"bytes,1,rep,name=tokens,proto3" json:"tokens,omitempty"`
	Ids    []string `protobuf:"bytes,2,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *SessionRemoved) Reset() {
    logtrace.LogWithFunctionName()
	*x = SessionRemoved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionRemoved) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionRemoved) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *SessionRemoved) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionRemoved.ProtoReflect.Descriptor instead.
func (*SessionRemoved) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{11}
}

func (x *SessionRemoved) GetTokens() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Tokens
	}
	return nil
}

func (x *SessionRemoved) GetIds() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Ids
	}
	return nil
}

type RequestClientReSync struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *RequestClientReSync) Reset() {
    logtrace.LogWithFunctionName()
	*x = RequestClientReSync{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestClientReSync) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestClientReSync) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *RequestClientReSync) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestClientReSync.ProtoReflect.Descriptor instead.
func (*RequestClientReSync) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{12}
}

func (x *RequestClientReSync) GetReason() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Reason
	}
	return ""
}

type CreateCircuitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken         string            `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	Fingerprints         []string          `protobuf:"bytes,2,rep,name=fingerprints,proto3" json:"fingerprints,omitempty"`
	TerminatorInstanceId string            `protobuf:"bytes,3,opt,name=terminatorInstanceId,proto3" json:"terminatorInstanceId,omitempty"`
	PeerData             map[uint32][]byte `protobuf:"bytes,4,rep,name=peerData,proto3" json:"peerData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ApiSessionToken      string            `protobuf:"bytes,5,opt,name=apiSessionToken,proto3" json:"apiSessionToken,omitempty"`
}

func (x *CreateCircuitRequest) Reset() {
    logtrace.LogWithFunctionName()
	*x = CreateCircuitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCircuitRequest) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCircuitRequest) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *CreateCircuitRequest) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCircuitRequest.ProtoReflect.Descriptor instead.
func (*CreateCircuitRequest) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{13}
}

func (x *CreateCircuitRequest) GetSessionToken() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *CreateCircuitRequest) GetFingerprints() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Fingerprints
	}
	return nil
}

func (x *CreateCircuitRequest) GetTerminatorInstanceId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.TerminatorInstanceId
	}
	return ""
}

func (x *CreateCircuitRequest) GetPeerData() map[uint32][]byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.PeerData
	}
	return nil
}

func (x *CreateCircuitRequest) GetApiSessionToken() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ApiSessionToken
	}
	return ""
}

type CreateCircuitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CircuitId string            `protobuf:"bytes,1,opt,name=circuitId,proto3" json:"circuitId,omitempty"`
	Address   string            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	PeerData  map[uint32][]byte `protobuf:"bytes,3,rep,name=peerData,proto3" json:"peerData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tags      map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateCircuitResponse) Reset() {
    logtrace.LogWithFunctionName()
	*x = CreateCircuitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCircuitResponse) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCircuitResponse) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *CreateCircuitResponse) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCircuitResponse.ProtoReflect.Descriptor instead.
func (*CreateCircuitResponse) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{14}
}

func (x *CreateCircuitResponse) GetCircuitId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.CircuitId
	}
	return ""
}

func (x *CreateCircuitResponse) GetAddress() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateCircuitResponse) GetPeerData() map[uint32][]byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.PeerData
	}
	return nil
}

func (x *CreateCircuitResponse) GetTags() map[string]string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Tags
	}
	return nil
}

type CreateTerminatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken    string               `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	Fingerprints    []string             `protobuf:"bytes,2,rep,name=fingerprints,proto3" json:"fingerprints,omitempty"`
	PeerData        map[uint32][]byte    `protobuf:"bytes,3,rep,name=peerData,proto3" json:"peerData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cost            uint32               `protobuf:"varint,4,opt,name=cost,proto3" json:"cost,omitempty"`
	Precedence      TerminatorPrecedence `protobuf:"varint,5,opt,name=precedence,proto3,enum=ziti.edge_ctrl.pb.TerminatorPrecedence" json:"precedence,omitempty"`
	InstanceId      string               `protobuf:"bytes,6,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	InstanceSecret  []byte               `protobuf:"bytes,7,opt,name=instanceSecret,proto3" json:"instanceSecret,omitempty"`
	ApiSessionToken string               `protobuf:"bytes,8,opt,name=apiSessionToken,proto3" json:"apiSessionToken,omitempty"`
}

func (x *CreateTerminatorRequest) Reset() {
    logtrace.LogWithFunctionName()
	*x = CreateTerminatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTerminatorRequest) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTerminatorRequest) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *CreateTerminatorRequest) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTerminatorRequest.ProtoReflect.Descriptor instead.
func (*CreateTerminatorRequest) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{15}
}

func (x *CreateTerminatorRequest) GetSessionToken() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *CreateTerminatorRequest) GetFingerprints() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Fingerprints
	}
	return nil
}

func (x *CreateTerminatorRequest) GetPeerData() map[uint32][]byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.PeerData
	}
	return nil
}

func (x *CreateTerminatorRequest) GetCost() uint32 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *CreateTerminatorRequest) GetPrecedence() TerminatorPrecedence {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Precedence
	}
	return TerminatorPrecedence_Default
}

func (x *CreateTerminatorRequest) GetInstanceId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CreateTerminatorRequest) GetInstanceSecret() []byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.InstanceSecret
	}
	return nil
}

func (x *CreateTerminatorRequest) GetApiSessionToken() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ApiSessionToken
	}
	return ""
}

type CreateTerminatorV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         string               `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	SessionToken    string               `protobuf:"bytes,2,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	Fingerprints    []string             `protobuf:"bytes,3,rep,name=fingerprints,proto3" json:"fingerprints,omitempty"`
	PeerData        map[uint32][]byte    `protobuf:"bytes,4,rep,name=peerData,proto3" json:"peerData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cost            uint32               `protobuf:"varint,5,opt,name=cost,proto3" json:"cost,omitempty"`
	Precedence      TerminatorPrecedence `protobuf:"varint,6,opt,name=precedence,proto3,enum=ziti.edge_ctrl.pb.TerminatorPrecedence" json:"precedence,omitempty"`
	InstanceId      string               `protobuf:"bytes,7,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	InstanceSecret  []byte               `protobuf:"bytes,8,opt,name=instanceSecret,proto3" json:"instanceSecret,omitempty"`
	ApiSessionToken string               `protobuf:"bytes,9,opt,name=apiSessionToken,proto3" json:"apiSessionToken,omitempty"`
}

func (x *CreateTerminatorV2Request) Reset() {
    logtrace.LogWithFunctionName()
	*x = CreateTerminatorV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTerminatorV2Request) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTerminatorV2Request) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *CreateTerminatorV2Request) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTerminatorV2Request.ProtoReflect.Descriptor instead.
func (*CreateTerminatorV2Request) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{16}
}

func (x *CreateTerminatorV2Request) GetAddress() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateTerminatorV2Request) GetSessionToken() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *CreateTerminatorV2Request) GetFingerprints() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Fingerprints
	}
	return nil
}

func (x *CreateTerminatorV2Request) GetPeerData() map[uint32][]byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.PeerData
	}
	return nil
}

func (x *CreateTerminatorV2Request) GetCost() uint32 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *CreateTerminatorV2Request) GetPrecedence() TerminatorPrecedence {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Precedence
	}
	return TerminatorPrecedence_Default
}

func (x *CreateTerminatorV2Request) GetInstanceId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CreateTerminatorV2Request) GetInstanceSecret() []byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.InstanceSecret
	}
	return nil
}

func (x *CreateTerminatorV2Request) GetApiSessionToken() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ApiSessionToken
	}
	return ""
}

type CreateTerminatorV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminatorId string                 `protobuf:"bytes,1,opt,name=terminatorId,proto3" json:"terminatorId,omitempty"`
	Result       CreateTerminatorResult `protobuf:"varint,2,opt,name=result,proto3,enum=ziti.edge_ctrl.pb.CreateTerminatorResult" json:"result,omitempty"`
	Msg          string                 `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *CreateTerminatorV2Response) Reset() {
    logtrace.LogWithFunctionName()
	*x = CreateTerminatorV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTerminatorV2Response) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTerminatorV2Response) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *CreateTerminatorV2Response) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTerminatorV2Response.ProtoReflect.Descriptor instead.
func (*CreateTerminatorV2Response) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{17}
}

func (x *CreateTerminatorV2Response) GetTerminatorId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.TerminatorId
	}
	return ""
}

func (x *CreateTerminatorV2Response) GetResult() CreateTerminatorResult {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Result
	}
	return CreateTerminatorResult_Success
}

func (x *CreateTerminatorV2Response) GetMsg() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Msg
	}
	return ""
}

type RemoveTerminatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken    string   `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	Fingerprints    []string `protobuf:"bytes,2,rep,name=fingerprints,proto3" json:"fingerprints,omitempty"`
	TerminatorId    string   `protobuf:"bytes,3,opt,name=terminatorId,proto3" json:"terminatorId,omitempty"`
	ApiSessionToken string   `protobuf:"bytes,4,opt,name=apiSessionToken,proto3" json:"apiSessionToken,omitempty"`
}

func (x *RemoveTerminatorRequest) Reset() {
    logtrace.LogWithFunctionName()
	*x = RemoveTerminatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTerminatorRequest) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTerminatorRequest) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *RemoveTerminatorRequest) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTerminatorRequest.ProtoReflect.Descriptor instead.
func (*RemoveTerminatorRequest) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{18}
}

func (x *RemoveTerminatorRequest) GetSessionToken() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *RemoveTerminatorRequest) GetFingerprints() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Fingerprints
	}
	return nil
}

func (x *RemoveTerminatorRequest) GetTerminatorId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.TerminatorId
	}
	return ""
}

func (x *RemoveTerminatorRequest) GetApiSessionToken() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ApiSessionToken
	}
	return ""
}

type UpdateTerminatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken     string               `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	Fingerprints     []string             `protobuf:"bytes,2,rep,name=fingerprints,proto3" json:"fingerprints,omitempty"`
	TerminatorId     string               `protobuf:"bytes,3,opt,name=terminatorId,proto3" json:"terminatorId,omitempty"`
	Cost             uint32               `protobuf:"varint,4,opt,name=cost,proto3" json:"cost,omitempty"`
	Precedence       TerminatorPrecedence `protobuf:"varint,5,opt,name=precedence,proto3,enum=ziti.edge_ctrl.pb.TerminatorPrecedence" json:"precedence,omitempty"`
	UpdatePrecedence bool                 `protobuf:"varint,6,opt,name=updatePrecedence,proto3" json:"updatePrecedence,omitempty"`
	UpdateCost       bool                 `protobuf:"varint,7,opt,name=updateCost,proto3" json:"updateCost,omitempty"`
	ApiSessionToken  string               `protobuf:"bytes,8,opt,name=apiSessionToken,proto3" json:"apiSessionToken,omitempty"`
}

func (x *UpdateTerminatorRequest) Reset() {
    logtrace.LogWithFunctionName()
	*x = UpdateTerminatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTerminatorRequest) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTerminatorRequest) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *UpdateTerminatorRequest) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTerminatorRequest.ProtoReflect.Descriptor instead.
func (*UpdateTerminatorRequest) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateTerminatorRequest) GetSessionToken() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *UpdateTerminatorRequest) GetFingerprints() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Fingerprints
	}
	return nil
}

func (x *UpdateTerminatorRequest) GetTerminatorId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.TerminatorId
	}
	return ""
}

func (x *UpdateTerminatorRequest) GetCost() uint32 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *UpdateTerminatorRequest) GetPrecedence() TerminatorPrecedence {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Precedence
	}
	return TerminatorPrecedence_Default
}

func (x *UpdateTerminatorRequest) GetUpdatePrecedence() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.UpdatePrecedence
	}
	return false
}

func (x *UpdateTerminatorRequest) GetUpdateCost() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.UpdateCost
	}
	return false
}

func (x *UpdateTerminatorRequest) GetApiSessionToken() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ApiSessionToken
	}
	return ""
}

type HealthEventRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionToken    string   `protobuf:"bytes,1,opt,name=sessionToken,proto3" json:"sessionToken,omitempty"`
	Fingerprints    []string `protobuf:"bytes,2,rep,name=fingerprints,proto3" json:"fingerprints,omitempty"`
	TerminatorId    string   `protobuf:"bytes,3,opt,name=terminatorId,proto3" json:"terminatorId,omitempty"`
	CheckPassed     bool     `protobuf:"varint,4,opt,name=checkPassed,proto3" json:"checkPassed,omitempty"`
	ApiSessionToken string   `protobuf:"bytes,5,opt,name=apiSessionToken,proto3" json:"apiSessionToken,omitempty"`
}

func (x *HealthEventRequest) Reset() {
    logtrace.LogWithFunctionName()
	*x = HealthEventRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HealthEventRequest) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthEventRequest) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *HealthEventRequest) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthEventRequest.ProtoReflect.Descriptor instead.
func (*HealthEventRequest) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{20}
}

func (x *HealthEventRequest) GetSessionToken() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.SessionToken
	}
	return ""
}

func (x *HealthEventRequest) GetFingerprints() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Fingerprints
	}
	return nil
}

func (x *HealthEventRequest) GetTerminatorId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.TerminatorId
	}
	return ""
}

func (x *HealthEventRequest) GetCheckPassed() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.CheckPassed
	}
	return false
}

func (x *HealthEventRequest) GetApiSessionToken() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ApiSessionToken
	}
	return ""
}

type ValidateSessionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionTokens []string `protobuf:"bytes,1,rep,name=sessionTokens,proto3" json:"sessionTokens,omitempty"`
}

func (x *ValidateSessionsRequest) Reset() {
    logtrace.LogWithFunctionName()
	*x = ValidateSessionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidateSessionsRequest) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateSessionsRequest) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *ValidateSessionsRequest) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateSessionsRequest.ProtoReflect.Descriptor instead.
func (*ValidateSessionsRequest) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{21}
}

func (x *ValidateSessionsRequest) GetSessionTokens() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.SessionTokens
	}
	return nil
}

type EnvInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Arch      string `protobuf:"bytes,1,opt,name=arch,proto3" json:"arch,omitempty"`
	Os        string `protobuf:"bytes,2,opt,name=Os,proto3" json:"Os,omitempty"`
	OsRelease string `protobuf:"bytes,3,opt,name=OsRelease,proto3" json:"OsRelease,omitempty"`
	OsVersion string `protobuf:"bytes,4,opt,name=OsVersion,proto3" json:"OsVersion,omitempty"`
	Hostname  string `protobuf:"bytes,5,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	Domain    string `protobuf:"bytes,6,opt,name=Domain,proto3" json:"Domain,omitempty"`
}

func (x *EnvInfo) Reset() {
    logtrace.LogWithFunctionName()
	*x = EnvInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvInfo) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvInfo) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *EnvInfo) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvInfo.ProtoReflect.Descriptor instead.
func (*EnvInfo) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{22}
}

func (x *EnvInfo) GetArch() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *EnvInfo) GetOs() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *EnvInfo) GetOsRelease() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.OsRelease
	}
	return ""
}

func (x *EnvInfo) GetOsVersion() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.OsVersion
	}
	return ""
}

func (x *EnvInfo) GetHostname() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *EnvInfo) GetDomain() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Domain
	}
	return ""
}

type SdkInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId      string `protobuf:"bytes,1,opt,name=AppId,proto3" json:"AppId,omitempty"`
	AppVersion string `protobuf:"bytes,2,opt,name=AppVersion,proto3" json:"AppVersion,omitempty"`
	Branch     string `protobuf:"bytes,3,opt,name=Branch,proto3" json:"Branch,omitempty"`
	Revision   string `protobuf:"bytes,4,opt,name=Revision,proto3" json:"Revision,omitempty"`
	Type       string `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	Version    string `protobuf:"bytes,6,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *SdkInfo) Reset() {
    logtrace.LogWithFunctionName()
	*x = SdkInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SdkInfo) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*SdkInfo) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *SdkInfo) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SdkInfo.ProtoReflect.Descriptor instead.
func (*SdkInfo) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{23}
}

func (x *SdkInfo) GetAppId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *SdkInfo) GetAppVersion() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.AppVersion
	}
	return ""
}

func (x *SdkInfo) GetBranch() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Branch
	}
	return ""
}

func (x *SdkInfo) GetRevision() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *SdkInfo) GetType() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SdkInfo) GetVersion() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Version
	}
	return ""
}

type CreateApiSessionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnvInfo     *EnvInfo `protobuf:"bytes,1,opt,name=envInfo,proto3" json:"envInfo,omitempty"`
	SdkInfo     *SdkInfo `protobuf:"bytes,2,opt,name=sdkInfo,proto3" json:"sdkInfo,omitempty"`
	ConfigTypes []string `protobuf:"bytes,3,rep,name=configTypes,proto3" json:"configTypes,omitempty"`
}

func (x *CreateApiSessionRequest) Reset() {
    logtrace.LogWithFunctionName()
	*x = CreateApiSessionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApiSessionRequest) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApiSessionRequest) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *CreateApiSessionRequest) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApiSessionRequest.ProtoReflect.Descriptor instead.
func (*CreateApiSessionRequest) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{24}
}

func (x *CreateApiSessionRequest) GetEnvInfo() *EnvInfo {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.EnvInfo
	}
	return nil
}

func (x *CreateApiSessionRequest) GetSdkInfo() *SdkInfo {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.SdkInfo
	}
	return nil
}

func (x *CreateApiSessionRequest) GetConfigTypes() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ConfigTypes
	}
	return nil
}

type CreateApiSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId                string                          `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Token                    string                          `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	RefreshIntervalSeconds   uint32                          `protobuf:"varint,3,opt,name=refreshIntervalSeconds,proto3" json:"refreshIntervalSeconds,omitempty"`
	IdentityId               string                          `protobuf:"bytes,4,opt,name=identityId,proto3" json:"identityId,omitempty"`
	IdentityName             string                          `protobuf:"bytes,5,opt,name=identityName,proto3" json:"identityName,omitempty"`
	DefaultHostingPrecedence TerminatorPrecedence            `protobuf:"varint,6,opt,name=defaultHostingPrecedence,proto3,enum=ziti.edge_ctrl.pb.TerminatorPrecedence" json:"defaultHostingPrecedence,omitempty"`
	DefaultHostingCost       uint32                          `protobuf:"varint,7,opt,name=defaultHostingCost,proto3" json:"defaultHostingCost,omitempty"`
	AppDataJson              string                          `protobuf:"bytes,8,opt,name=appDataJson,proto3" json:"appDataJson,omitempty"`
	ServicePrecedences       map[string]TerminatorPrecedence `protobuf:"bytes,9,rep,name=servicePrecedences,proto3" json:"servicePrecedences,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=ziti.edge_ctrl.pb.TerminatorPrecedence"`
	ServiceCosts             map[string]uint32               `protobuf:"bytes,10,rep,name=serviceCosts,proto3" json:"serviceCosts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CreateApiSessionResponse) Reset() {
    logtrace.LogWithFunctionName()
	*x = CreateApiSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateApiSessionResponse) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateApiSessionResponse) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *CreateApiSessionResponse) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateApiSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateApiSessionResponse) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{25}
}

func (x *CreateApiSessionResponse) GetSessionId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateApiSessionResponse) GetToken() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CreateApiSessionResponse) GetRefreshIntervalSeconds() uint32 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.RefreshIntervalSeconds
	}
	return 0
}

func (x *CreateApiSessionResponse) GetIdentityId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.IdentityId
	}
	return ""
}

func (x *CreateApiSessionResponse) GetIdentityName() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.IdentityName
	}
	return ""
}

func (x *CreateApiSessionResponse) GetDefaultHostingPrecedence() TerminatorPrecedence {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.DefaultHostingPrecedence
	}
	return TerminatorPrecedence_Default
}

func (x *CreateApiSessionResponse) GetDefaultHostingCost() uint32 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.DefaultHostingCost
	}
	return 0
}

func (x *CreateApiSessionResponse) GetAppDataJson() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.AppDataJson
	}
	return ""
}

func (x *CreateApiSessionResponse) GetServicePrecedences() map[string]TerminatorPrecedence {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ServicePrecedences
	}
	return nil
}

func (x *CreateApiSessionResponse) GetServiceCosts() map[string]uint32 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ServiceCosts
	}
	return nil
}

type CreateCircuitForServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId            string            `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	ServiceName          string            `protobuf:"bytes,2,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	TerminatorInstanceId string            `protobuf:"bytes,3,opt,name=terminatorInstanceId,proto3" json:"terminatorInstanceId,omitempty"`
	PeerData             map[uint32][]byte `protobuf:"bytes,4,rep,name=peerData,proto3" json:"peerData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateCircuitForServiceRequest) Reset() {
    logtrace.LogWithFunctionName()
	*x = CreateCircuitForServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCircuitForServiceRequest) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCircuitForServiceRequest) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *CreateCircuitForServiceRequest) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCircuitForServiceRequest.ProtoReflect.Descriptor instead.
func (*CreateCircuitForServiceRequest) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{26}
}

func (x *CreateCircuitForServiceRequest) GetSessionId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateCircuitForServiceRequest) GetServiceName() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *CreateCircuitForServiceRequest) GetTerminatorInstanceId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.TerminatorInstanceId
	}
	return ""
}

func (x *CreateCircuitForServiceRequest) GetPeerData() map[uint32][]byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.PeerData
	}
	return nil
}

type CreateSessionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CreateSessionResponse) Reset() {
    logtrace.LogWithFunctionName()
	*x = CreateSessionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSessionResponse) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSessionResponse) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *CreateSessionResponse) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSessionResponse.ProtoReflect.Descriptor instead.
func (*CreateSessionResponse) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{27}
}

func (x *CreateSessionResponse) GetSessionId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateSessionResponse) GetToken() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Token
	}
	return ""
}

type CreateCircuitForServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiSession *CreateApiSessionResponse `protobuf:"bytes,1,opt,name=apiSession,proto3" json:"apiSession,omitempty"`
	Session    *CreateSessionResponse    `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	CircuitId  string                    `protobuf:"bytes,3,opt,name=circuitId,proto3" json:"circuitId,omitempty"`
	Address    string                    `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	PeerData   map[uint32][]byte         `protobuf:"bytes,5,rep,name=peerData,proto3" json:"peerData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tags       map[string]string         `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateCircuitForServiceResponse) Reset() {
    logtrace.LogWithFunctionName()
	*x = CreateCircuitForServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCircuitForServiceResponse) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCircuitForServiceResponse) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *CreateCircuitForServiceResponse) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCircuitForServiceResponse.ProtoReflect.Descriptor instead.
func (*CreateCircuitForServiceResponse) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{28}
}

func (x *CreateCircuitForServiceResponse) GetApiSession() *CreateApiSessionResponse {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ApiSession
	}
	return nil
}

func (x *CreateCircuitForServiceResponse) GetSession() *CreateSessionResponse {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *CreateCircuitForServiceResponse) GetCircuitId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.CircuitId
	}
	return ""
}

func (x *CreateCircuitForServiceResponse) GetAddress() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateCircuitForServiceResponse) GetPeerData() map[uint32][]byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.PeerData
	}
	return nil
}

func (x *CreateCircuitForServiceResponse) GetTags() map[string]string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Tags
	}
	return nil
}

type CreateTunnelCircuitV2Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName          string            `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	TerminatorInstanceId string            `protobuf:"bytes,2,opt,name=terminatorInstanceId,proto3" json:"terminatorInstanceId,omitempty"`
	PeerData             map[uint32][]byte `protobuf:"bytes,3,rep,name=peerData,proto3" json:"peerData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateTunnelCircuitV2Request) Reset() {
    logtrace.LogWithFunctionName()
	*x = CreateTunnelCircuitV2Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelCircuitV2Request) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelCircuitV2Request) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *CreateTunnelCircuitV2Request) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelCircuitV2Request.ProtoReflect.Descriptor instead.
func (*CreateTunnelCircuitV2Request) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{29}
}

func (x *CreateTunnelCircuitV2Request) GetServiceName() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *CreateTunnelCircuitV2Request) GetTerminatorInstanceId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.TerminatorInstanceId
	}
	return ""
}

func (x *CreateTunnelCircuitV2Request) GetPeerData() map[uint32][]byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.PeerData
	}
	return nil
}

type CreateTunnelCircuitV2Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CircuitId string            `protobuf:"bytes,1,opt,name=circuitId,proto3" json:"circuitId,omitempty"`
	Address   string            `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	PeerData  map[uint32][]byte `protobuf:"bytes,3,rep,name=peerData,proto3" json:"peerData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tags      map[string]string `protobuf:"bytes,4,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateTunnelCircuitV2Response) Reset() {
    logtrace.LogWithFunctionName()
	*x = CreateTunnelCircuitV2Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelCircuitV2Response) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelCircuitV2Response) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *CreateTunnelCircuitV2Response) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelCircuitV2Response.ProtoReflect.Descriptor instead.
func (*CreateTunnelCircuitV2Response) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{30}
}

func (x *CreateTunnelCircuitV2Response) GetCircuitId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.CircuitId
	}
	return ""
}

func (x *CreateTunnelCircuitV2Response) GetAddress() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateTunnelCircuitV2Response) GetPeerData() map[uint32][]byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.PeerData
	}
	return nil
}

func (x *CreateTunnelCircuitV2Response) GetTags() map[string]string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Tags
	}
	return nil
}

type ServicesList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastUpdate []byte           `protobuf:"bytes,1,opt,name=lastUpdate,proto3" json:"lastUpdate,omitempty"`
	Services   []*TunnelService `protobuf:"bytes,2,rep,name=services,proto3" json:"services,omitempty"`
}

func (x *ServicesList) Reset() {
    logtrace.LogWithFunctionName()
	*x = ServicesList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServicesList) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*ServicesList) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *ServicesList) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServicesList.ProtoReflect.Descriptor instead.
func (*ServicesList) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{31}
}

func (x *ServicesList) GetLastUpdate() []byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.LastUpdate
	}
	return nil
}

func (x *ServicesList) GetServices() []*TunnelService {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Services
	}
	return nil
}

type TunnelService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Permissions []string `protobuf:"bytes,3,rep,name=permissions,proto3" json:"permissions,omitempty"`
	Encryption  bool     `protobuf:"varint,4,opt,name=encryption,proto3" json:"encryption,omitempty"`
	Config      []byte   `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	Tags        []byte   `protobuf:"bytes,6,opt,name=tags,proto3" json:"tags,omitempty"`
}

func (x *TunnelService) Reset() {
    logtrace.LogWithFunctionName()
	*x = TunnelService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelService) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelService) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *TunnelService) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelService.ProtoReflect.Descriptor instead.
func (*TunnelService) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{32}
}

func (x *TunnelService) GetId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TunnelService) GetName() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TunnelService) GetPermissions() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *TunnelService) GetEncryption() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Encryption
	}
	return false
}

func (x *TunnelService) GetConfig() []byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TunnelService) GetTags() []byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Tags
	}
	return nil
}

type CreateTunnelTerminatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName    string               `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	SessionId      string               `protobuf:"bytes,2,opt,name=sessionId,proto3" json:"sessionId,omitempty"`
	Address        string               `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	PeerData       map[uint32][]byte    `protobuf:"bytes,4,rep,name=peerData,proto3" json:"peerData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cost           uint32               `protobuf:"varint,5,opt,name=cost,proto3" json:"cost,omitempty"`
	Precedence     TerminatorPrecedence `protobuf:"varint,6,opt,name=precedence,proto3,enum=ziti.edge_ctrl.pb.TerminatorPrecedence" json:"precedence,omitempty"`
	InstanceId     string               `protobuf:"bytes,7,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	InstanceSecret []byte               `protobuf:"bytes,8,opt,name=instanceSecret,proto3" json:"instanceSecret,omitempty"`
	StartTime      int64                `protobuf:"varint,9,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *CreateTunnelTerminatorRequest) Reset() {
    logtrace.LogWithFunctionName()
	*x = CreateTunnelTerminatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelTerminatorRequest) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelTerminatorRequest) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *CreateTunnelTerminatorRequest) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelTerminatorRequest.ProtoReflect.Descriptor instead.
func (*CreateTunnelTerminatorRequest) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{33}
}

func (x *CreateTunnelTerminatorRequest) GetServiceName() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *CreateTunnelTerminatorRequest) GetSessionId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CreateTunnelTerminatorRequest) GetAddress() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateTunnelTerminatorRequest) GetPeerData() map[uint32][]byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.PeerData
	}
	return nil
}

func (x *CreateTunnelTerminatorRequest) GetCost() uint32 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *CreateTunnelTerminatorRequest) GetPrecedence() TerminatorPrecedence {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Precedence
	}
	return TerminatorPrecedence_Default
}

func (x *CreateTunnelTerminatorRequest) GetInstanceId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CreateTunnelTerminatorRequest) GetInstanceSecret() []byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.InstanceSecret
	}
	return nil
}

func (x *CreateTunnelTerminatorRequest) GetStartTime() int64 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.StartTime
	}
	return 0
}

type CreateTunnelTerminatorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApiSession   *CreateApiSessionResponse `protobuf:"bytes,1,opt,name=apiSession,proto3" json:"apiSession,omitempty"`
	Session      *CreateSessionResponse    `protobuf:"bytes,2,opt,name=session,proto3" json:"session,omitempty"`
	TerminatorId string                    `protobuf:"bytes,3,opt,name=terminatorId,proto3" json:"terminatorId,omitempty"`
	StartTime    int64                     `protobuf:"varint,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *CreateTunnelTerminatorResponse) Reset() {
    logtrace.LogWithFunctionName()
	*x = CreateTunnelTerminatorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelTerminatorResponse) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelTerminatorResponse) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *CreateTunnelTerminatorResponse) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelTerminatorResponse.ProtoReflect.Descriptor instead.
func (*CreateTunnelTerminatorResponse) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{34}
}

func (x *CreateTunnelTerminatorResponse) GetApiSession() *CreateApiSessionResponse {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ApiSession
	}
	return nil
}

func (x *CreateTunnelTerminatorResponse) GetSession() *CreateSessionResponse {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *CreateTunnelTerminatorResponse) GetTerminatorId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.TerminatorId
	}
	return ""
}

func (x *CreateTunnelTerminatorResponse) GetStartTime() int64 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.StartTime
	}
	return 0
}

type CreateTunnelTerminatorRequestV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceId      string               `protobuf:"bytes,1,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	Address        string               `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	PeerData       map[uint32][]byte    `protobuf:"bytes,3,rep,name=peerData,proto3" json:"peerData,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Cost           uint32               `protobuf:"varint,4,opt,name=cost,proto3" json:"cost,omitempty"`
	Precedence     TerminatorPrecedence `protobuf:"varint,5,opt,name=precedence,proto3,enum=ziti.edge_ctrl.pb.TerminatorPrecedence" json:"precedence,omitempty"`
	InstanceId     string               `protobuf:"bytes,6,opt,name=instanceId,proto3" json:"instanceId,omitempty"`
	InstanceSecret []byte               `protobuf:"bytes,7,opt,name=instanceSecret,proto3" json:"instanceSecret,omitempty"`
	StartTime      int64                `protobuf:"varint,8,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *CreateTunnelTerminatorRequestV2) Reset() {
    logtrace.LogWithFunctionName()
	*x = CreateTunnelTerminatorRequestV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelTerminatorRequestV2) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelTerminatorRequestV2) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *CreateTunnelTerminatorRequestV2) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelTerminatorRequestV2.ProtoReflect.Descriptor instead.
func (*CreateTunnelTerminatorRequestV2) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{35}
}

func (x *CreateTunnelTerminatorRequestV2) GetServiceId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *CreateTunnelTerminatorRequestV2) GetAddress() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreateTunnelTerminatorRequestV2) GetPeerData() map[uint32][]byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.PeerData
	}
	return nil
}

func (x *CreateTunnelTerminatorRequestV2) GetCost() uint32 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *CreateTunnelTerminatorRequestV2) GetPrecedence() TerminatorPrecedence {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Precedence
	}
	return TerminatorPrecedence_Default
}

func (x *CreateTunnelTerminatorRequestV2) GetInstanceId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *CreateTunnelTerminatorRequestV2) GetInstanceSecret() []byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.InstanceSecret
	}
	return nil
}

func (x *CreateTunnelTerminatorRequestV2) GetStartTime() int64 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.StartTime
	}
	return 0
}

type CreateTunnelTerminatorResponseV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminatorId string `protobuf:"bytes,1,opt,name=terminatorId,proto3" json:"terminatorId,omitempty"`
	StartTime    int64  `protobuf:"varint,2,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *CreateTunnelTerminatorResponseV2) Reset() {
    logtrace.LogWithFunctionName()
	*x = CreateTunnelTerminatorResponseV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTunnelTerminatorResponseV2) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTunnelTerminatorResponseV2) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *CreateTunnelTerminatorResponseV2) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTunnelTerminatorResponseV2.ProtoReflect.Descriptor instead.
func (*CreateTunnelTerminatorResponseV2) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{36}
}

func (x *CreateTunnelTerminatorResponseV2) GetTerminatorId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.TerminatorId
	}
	return ""
}

func (x *CreateTunnelTerminatorResponseV2) GetStartTime() int64 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.StartTime
	}
	return 0
}

type UpdateTunnelTerminatorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TerminatorId     string               `protobuf:"bytes,1,opt,name=terminatorId,proto3" json:"terminatorId,omitempty"`
	Cost             uint32               `protobuf:"varint,2,opt,name=cost,proto3" json:"cost,omitempty"`
	Precedence       TerminatorPrecedence `protobuf:"varint,3,opt,name=precedence,proto3,enum=ziti.edge_ctrl.pb.TerminatorPrecedence" json:"precedence,omitempty"`
	UpdatePrecedence bool                 `protobuf:"varint,4,opt,name=updatePrecedence,proto3" json:"updatePrecedence,omitempty"`
	UpdateCost       bool                 `protobuf:"varint,5,opt,name=updateCost,proto3" json:"updateCost,omitempty"`
}

func (x *UpdateTunnelTerminatorRequest) Reset() {
    logtrace.LogWithFunctionName()
	*x = UpdateTunnelTerminatorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTunnelTerminatorRequest) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTunnelTerminatorRequest) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *UpdateTunnelTerminatorRequest) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTunnelTerminatorRequest.ProtoReflect.Descriptor instead.
func (*UpdateTunnelTerminatorRequest) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{37}
}

func (x *UpdateTunnelTerminatorRequest) GetTerminatorId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.TerminatorId
	}
	return ""
}

func (x *UpdateTunnelTerminatorRequest) GetCost() uint32 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Cost
	}
	return 0
}

func (x *UpdateTunnelTerminatorRequest) GetPrecedence() TerminatorPrecedence {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Precedence
	}
	return TerminatorPrecedence_Default
}

func (x *UpdateTunnelTerminatorRequest) GetUpdatePrecedence() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.UpdatePrecedence
	}
	return false
}

func (x *UpdateTunnelTerminatorRequest) GetUpdateCost() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.UpdateCost
	}
	return false
}

type EnrollmentExtendRouterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientCertCsr       string `protobuf:"bytes,1,opt,name=clientCertCsr,proto3" json:"clientCertCsr,omitempty"`
	ServerCertCsr       string `protobuf:"bytes,2,opt,name=serverCertCsr,proto3" json:"serverCertCsr,omitempty"`
	RequireVerification bool   `protobuf:"varint,3,opt,name=requireVerification,proto3" json:"requireVerification,omitempty"`
}

func (x *EnrollmentExtendRouterRequest) Reset() {
    logtrace.LogWithFunctionName()
	*x = EnrollmentExtendRouterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollmentExtendRouterRequest) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollmentExtendRouterRequest) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *EnrollmentExtendRouterRequest) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollmentExtendRouterRequest.ProtoReflect.Descriptor instead.
func (*EnrollmentExtendRouterRequest) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{38}
}

func (x *EnrollmentExtendRouterRequest) GetClientCertCsr() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ClientCertCsr
	}
	return ""
}

func (x *EnrollmentExtendRouterRequest) GetServerCertCsr() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ServerCertCsr
	}
	return ""
}

func (x *EnrollmentExtendRouterRequest) GetRequireVerification() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.RequireVerification
	}
	return false
}

type EnrollmentCertsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientCertPem string `protobuf:"bytes,1,opt,name=clientCertPem,proto3" json:"clientCertPem,omitempty"`
	ServerCertPem string `protobuf:"bytes,2,opt,name=serverCertPem,proto3" json:"serverCertPem,omitempty"`
	CaCertsPem    string `protobuf:"bytes,3,opt,name=caCertsPem,proto3" json:"caCertsPem,omitempty"`
}

func (x *EnrollmentCertsResponse) Reset() {
    logtrace.LogWithFunctionName()
	*x = EnrollmentCertsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollmentCertsResponse) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollmentCertsResponse) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *EnrollmentCertsResponse) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollmentCertsResponse.ProtoReflect.Descriptor instead.
func (*EnrollmentCertsResponse) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{39}
}

func (x *EnrollmentCertsResponse) GetClientCertPem() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ClientCertPem
	}
	return ""
}

func (x *EnrollmentCertsResponse) GetServerCertPem() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ServerCertPem
	}
	return ""
}

func (x *EnrollmentCertsResponse) GetCaCertsPem() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.CaCertsPem
	}
	return ""
}

type EnrollmentExtendRouterVerifyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientCertPem string `protobuf:"bytes,1,opt,name=clientCertPem,proto3" json:"clientCertPem,omitempty"`
}

func (x *EnrollmentExtendRouterVerifyRequest) Reset() {
    logtrace.LogWithFunctionName()
	*x = EnrollmentExtendRouterVerifyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnrollmentExtendRouterVerifyRequest) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*EnrollmentExtendRouterVerifyRequest) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *EnrollmentExtendRouterVerifyRequest) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnrollmentExtendRouterVerifyRequest.ProtoReflect.Descriptor instead.
func (*EnrollmentExtendRouterVerifyRequest) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{40}
}

func (x *EnrollmentExtendRouterVerifyRequest) GetClientCertPem() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ClientCertPem
	}
	return ""
}

type ConnectEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Events    []*ConnectEvents_IdentityConnectEvents `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	FullState bool                                   `protobuf:"varint,2,opt,name=fullState,proto3" json:"fullState,omitempty"`
}

func (x *ConnectEvents) Reset() {
    logtrace.LogWithFunctionName()
	*x = ConnectEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectEvents) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectEvents) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *ConnectEvents) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectEvents.ProtoReflect.Descriptor instead.
func (*ConnectEvents) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{41}
}

func (x *ConnectEvents) GetEvents() []*ConnectEvents_IdentityConnectEvents {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *ConnectEvents) GetFullState() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.FullState
	}
	return false
}

type RouterDataModelValidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *DataState `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Fix   bool       `protobuf:"varint,2,opt,name=fix,proto3" json:"fix,omitempty"`
}

func (x *RouterDataModelValidateRequest) Reset() {
    logtrace.LogWithFunctionName()
	*x = RouterDataModelValidateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterDataModelValidateRequest) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterDataModelValidateRequest) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *RouterDataModelValidateRequest) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterDataModelValidateRequest.ProtoReflect.Descriptor instead.
func (*RouterDataModelValidateRequest) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{42}
}

func (x *RouterDataModelValidateRequest) GetState() *DataState {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.State
	}
	return nil
}

func (x *RouterDataModelValidateRequest) GetFix() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Fix
	}
	return false
}

type RouterDataModelDiff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EntityType string `protobuf:"bytes,1,opt,name=entityType,proto3" json:"entityType,omitempty"`
	EntityId   string `protobuf:"bytes,2,opt,name=entityId,proto3" json:"entityId,omitempty"`
	DiffType   string `protobuf:"bytes,3,opt,name=diffType,proto3" json:"diffType,omitempty"`
	Detail     string `protobuf:"bytes,4,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *RouterDataModelDiff) Reset() {
    logtrace.LogWithFunctionName()
	*x = RouterDataModelDiff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterDataModelDiff) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterDataModelDiff) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *RouterDataModelDiff) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterDataModelDiff.ProtoReflect.Descriptor instead.
func (*RouterDataModelDiff) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{43}
}

func (x *RouterDataModelDiff) GetEntityType() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.EntityType
	}
	return ""
}

func (x *RouterDataModelDiff) GetEntityId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.EntityId
	}
	return ""
}

func (x *RouterDataModelDiff) GetDiffType() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.DiffType
	}
	return ""
}

func (x *RouterDataModelDiff) GetDetail() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Detail
	}
	return ""
}

type RouterDataModelValidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrigEntityCounts map[string]uint32      `protobuf:"bytes,1,rep,name=origEntityCounts,proto3" json:"origEntityCounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CopyEntityCounts map[string]uint32      `protobuf:"bytes,2,rep,name=copyEntityCounts,proto3" json:"copyEntityCounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Diffs            []*RouterDataModelDiff `protobuf:"bytes,3,rep,name=diffs,proto3" json:"diffs,omitempty"`
}

func (x *RouterDataModelValidateResponse) Reset() {
    logtrace.LogWithFunctionName()
	*x = RouterDataModelValidateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterDataModelValidateResponse) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterDataModelValidateResponse) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *RouterDataModelValidateResponse) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterDataModelValidateResponse.ProtoReflect.Descriptor instead.
func (*RouterDataModelValidateResponse) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{44}
}

func (x *RouterDataModelValidateResponse) GetOrigEntityCounts() map[string]uint32 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.OrigEntityCounts
	}
	return nil
}

func (x *RouterDataModelValidateResponse) GetCopyEntityCounts() map[string]uint32 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.CopyEntityCounts
	}
	return nil
}

func (x *RouterDataModelValidateResponse) GetDiffs() []*RouterDataModelDiff {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Diffs
	}
	return nil
}

type SubscribeToDataModelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentIndex                uint64 `protobuf:"varint,1,opt,name=currentIndex,proto3" json:"currentIndex,omitempty"`
	SubscriptionDurationSeconds uint32 `protobuf:"varint,2,opt,name=subscriptionDurationSeconds,proto3" json:"subscriptionDurationSeconds,omitempty"`
	Renew                       bool   `protobuf:"varint,3,opt,name=renew,proto3" json:"renew,omitempty"`
}

func (x *SubscribeToDataModelRequest) Reset() {
    logtrace.LogWithFunctionName()
	*x = SubscribeToDataModelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeToDataModelRequest) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeToDataModelRequest) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *SubscribeToDataModelRequest) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeToDataModelRequest.ProtoReflect.Descriptor instead.
func (*SubscribeToDataModelRequest) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{45}
}

func (x *SubscribeToDataModelRequest) GetCurrentIndex() uint64 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.CurrentIndex
	}
	return 0
}

func (x *SubscribeToDataModelRequest) GetSubscriptionDurationSeconds() uint32 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.SubscriptionDurationSeconds
	}
	return 0
}

func (x *SubscribeToDataModelRequest) GetRenew() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Renew
	}
	return false
}

type DataState_ConfigType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DataState_ConfigType) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_ConfigType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_ConfigType) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_ConfigType) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_ConfigType) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_ConfigType.ProtoReflect.Descriptor instead.
func (*DataState_ConfigType) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 0}
}

func (x *DataState_ConfigType) GetId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataState_ConfigType) GetName() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Name
	}
	return ""
}

type DataState_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TypeId   string `protobuf:"bytes,2,opt,name=typeId,proto3" json:"typeId,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	DataJson string `protobuf:"bytes,4,opt,name=dataJson,proto3" json:"dataJson,omitempty"`
}

func (x *DataState_Config) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_Config) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_Config) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_Config) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_Config.ProtoReflect.Descriptor instead.
func (*DataState_Config) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 1}
}

func (x *DataState_Config) GetId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataState_Config) GetTypeId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (x *DataState_Config) GetName() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataState_Config) GetDataJson() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.DataJson
	}
	return ""
}

type DataState_ServiceConfigs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Configs map[string]string `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *DataState_ServiceConfigs) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_ServiceConfigs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_ServiceConfigs) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_ServiceConfigs) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_ServiceConfigs) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_ServiceConfigs.ProtoReflect.Descriptor instead.
func (*DataState_ServiceConfigs) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 2}
}

func (x *DataState_ServiceConfigs) GetConfigs() map[string]string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Configs
	}
	return nil
}

type DataState_Identity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                        string                               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                      string                               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	DefaultHostingPrecedence  TerminatorPrecedence                 `protobuf:"varint,3,opt,name=defaultHostingPrecedence,proto3,enum=ziti.edge_ctrl.pb.TerminatorPrecedence" json:"defaultHostingPrecedence,omitempty"`
	DefaultHostingCost        uint32                               `protobuf:"varint,4,opt,name=defaultHostingCost,proto3" json:"defaultHostingCost,omitempty"`
	ServiceHostingPrecedences map[string]TerminatorPrecedence      `protobuf:"bytes,5,rep,name=serviceHostingPrecedences,proto3" json:"serviceHostingPrecedences,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=ziti.edge_ctrl.pb.TerminatorPrecedence"`
	ServiceHostingCosts       map[string]uint32                    `protobuf:"bytes,6,rep,name=serviceHostingCosts,proto3" json:"serviceHostingCosts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AppDataJson               []byte                               `protobuf:"bytes,7,opt,name=appDataJson,proto3" json:"appDataJson,omitempty"`
	ServiceConfigs            map[string]*DataState_ServiceConfigs `protobuf:"bytes,8,rep,name=serviceConfigs,proto3" json:"serviceConfigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Disabled                  bool                                 `protobuf:"varint,9,opt,name=disabled,proto3" json:"disabled,omitempty"`
}

func (x *DataState_Identity) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_Identity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_Identity) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_Identity) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_Identity) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_Identity.ProtoReflect.Descriptor instead.
func (*DataState_Identity) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 3}
}

func (x *DataState_Identity) GetId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataState_Identity) GetName() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataState_Identity) GetDefaultHostingPrecedence() TerminatorPrecedence {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.DefaultHostingPrecedence
	}
	return TerminatorPrecedence_Default
}

func (x *DataState_Identity) GetDefaultHostingCost() uint32 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.DefaultHostingCost
	}
	return 0
}

func (x *DataState_Identity) GetServiceHostingPrecedences() map[string]TerminatorPrecedence {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ServiceHostingPrecedences
	}
	return nil
}

func (x *DataState_Identity) GetServiceHostingCosts() map[string]uint32 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ServiceHostingCosts
	}
	return nil
}

func (x *DataState_Identity) GetAppDataJson() []byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.AppDataJson
	}
	return nil
}

func (x *DataState_Identity) GetServiceConfigs() map[string]*DataState_ServiceConfigs {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ServiceConfigs
	}
	return nil
}

func (x *DataState_Identity) GetDisabled() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Disabled
	}
	return false
}

type DataState_Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name               string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	EncryptionRequired bool     `protobuf:"varint,3,opt,name=encryptionRequired,proto3" json:"encryptionRequired,omitempty"`
	Configs            []string `protobuf:"bytes,4,rep,name=configs,proto3" json:"configs,omitempty"`
}

func (x *DataState_Service) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_Service) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_Service) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_Service) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_Service.ProtoReflect.Descriptor instead.
func (*DataState_Service) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 4}
}

func (x *DataState_Service) GetId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataState_Service) GetName() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataState_Service) GetEncryptionRequired() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.EncryptionRequired
	}
	return false
}

func (x *DataState_Service) GetConfigs() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Configs
	}
	return nil
}

type DataState_ServicePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         string     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	PolicyType PolicyType `protobuf:"varint,3,opt,name=policyType,proto3,enum=ziti.edge_ctrl.pb.PolicyType" json:"policyType,omitempty"`
}

func (x *DataState_ServicePolicy) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_ServicePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_ServicePolicy) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_ServicePolicy) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_ServicePolicy) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_ServicePolicy.ProtoReflect.Descriptor instead.
func (*DataState_ServicePolicy) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 5}
}

func (x *DataState_ServicePolicy) GetId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataState_ServicePolicy) GetName() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataState_ServicePolicy) GetPolicyType() PolicyType {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.PolicyType
	}
	return PolicyType_InvalidPolicy
}

type DataState_Revocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=ExpiresAt,proto3" json:"ExpiresAt,omitempty"`
}

func (x *DataState_Revocation) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_Revocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_Revocation) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_Revocation) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_Revocation) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_Revocation.ProtoReflect.Descriptor instead.
func (*DataState_Revocation) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 6}
}

func (x *DataState_Revocation) GetId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataState_Revocation) GetExpiresAt() *timestamppb.Timestamp {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type DataState_ServicePolicyChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId          string                         `protobuf:"bytes,1,opt,name=policyId,proto3" json:"policyId,omitempty"`
	RelatedEntityIds  []string                       `protobuf:"bytes,2,rep,name=relatedEntityIds,proto3" json:"relatedEntityIds,omitempty"`
	RelatedEntityType ServicePolicyRelatedEntityType `protobuf:"varint,3,opt,name=relatedEntityType,proto3,enum=ziti.edge_ctrl.pb.ServicePolicyRelatedEntityType" json:"relatedEntityType,omitempty"`
	Add               bool                           `protobuf:"varint,4,opt,name=add,proto3" json:"add,omitempty"`
}

func (x *DataState_ServicePolicyChange) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_ServicePolicyChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_ServicePolicyChange) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_ServicePolicyChange) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_ServicePolicyChange) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_ServicePolicyChange.ProtoReflect.Descriptor instead.
func (*DataState_ServicePolicyChange) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 7}
}

func (x *DataState_ServicePolicyChange) GetPolicyId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.PolicyId
	}
	return ""
}

func (x *DataState_ServicePolicyChange) GetRelatedEntityIds() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.RelatedEntityIds
	}
	return nil
}

func (x *DataState_ServicePolicyChange) GetRelatedEntityType() ServicePolicyRelatedEntityType {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.RelatedEntityType
	}
	return ServicePolicyRelatedEntityType_InvalidRelatedType
}

func (x *DataState_ServicePolicyChange) GetAdd() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Add
	}
	return false
}

type DataState_ChangeSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index       uint64             `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	IsSynthetic bool               `protobuf:"varint,2,opt,name=isSynthetic,proto3" json:"isSynthetic,omitempty"`
	Changes     []*DataState_Event `protobuf:"bytes,3,rep,name=changes,proto3" json:"changes,omitempty"`
}

func (x *DataState_ChangeSet) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_ChangeSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_ChangeSet) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_ChangeSet) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_ChangeSet) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_ChangeSet.ProtoReflect.Descriptor instead.
func (*DataState_ChangeSet) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 8}
}

func (x *DataState_ChangeSet) GetIndex() uint64 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *DataState_ChangeSet) GetIsSynthetic() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.IsSynthetic
	}
	return false
}

func (x *DataState_ChangeSet) GetChanges() []*DataState_Event {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Changes
	}
	return nil
}

type DataState_Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action DataState_Action `protobuf:"varint,1,opt,name=action,proto3,enum=ziti.edge_ctrl.pb.DataState_Action" json:"action,omitempty"`
	// uint64 index = 2;
	IsSynthetic bool `protobuf:"varint,3,opt,name=isSynthetic,proto3" json:"isSynthetic,omitempty"`
	// Types that are assignable to Model:
	//
	//	*DataState_Event_Identity
	//	*DataState_Event_Service
	//	*DataState_Event_ServicePolicy
	//	*DataState_Event_PostureCheck
	//	*DataState_Event_PublicKey
	//	*DataState_Event_Revocation
	//	*DataState_Event_ServicePolicyChange
	//	*DataState_Event_ConfigType
	//	*DataState_Event_Config
	Model isDataState_Event_Model `protobuf_oneof:"Model"`
}

func (x *DataState_Event) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_Event) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_Event) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_Event) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_Event.ProtoReflect.Descriptor instead.
func (*DataState_Event) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 9}
}

func (x *DataState_Event) GetAction() DataState_Action {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Action
	}
	return DataState_Create
}

func (x *DataState_Event) GetIsSynthetic() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.IsSynthetic
	}
	return false
}

func (m *DataState_Event) GetModel() isDataState_Event_Model {
    logtrace.LogWithFunctionName()
	if m != nil {
		return m.Model
	}
	return nil
}

func (x *DataState_Event) GetIdentity() *DataState_Identity {
    logtrace.LogWithFunctionName()
	if x, ok := x.GetModel().(*DataState_Event_Identity); ok {
		return x.Identity
	}
	return nil
}

func (x *DataState_Event) GetService() *DataState_Service {
    logtrace.LogWithFunctionName()
	if x, ok := x.GetModel().(*DataState_Event_Service); ok {
		return x.Service
	}
	return nil
}

func (x *DataState_Event) GetServicePolicy() *DataState_ServicePolicy {
    logtrace.LogWithFunctionName()
	if x, ok := x.GetModel().(*DataState_Event_ServicePolicy); ok {
		return x.ServicePolicy
	}
	return nil
}

func (x *DataState_Event) GetPostureCheck() *DataState_PostureCheck {
    logtrace.LogWithFunctionName()
	if x, ok := x.GetModel().(*DataState_Event_PostureCheck); ok {
		return x.PostureCheck
	}
	return nil
}

func (x *DataState_Event) GetPublicKey() *DataState_PublicKey {
    logtrace.LogWithFunctionName()
	if x, ok := x.GetModel().(*DataState_Event_PublicKey); ok {
		return x.PublicKey
	}
	return nil
}

func (x *DataState_Event) GetRevocation() *DataState_Revocation {
    logtrace.LogWithFunctionName()
	if x, ok := x.GetModel().(*DataState_Event_Revocation); ok {
		return x.Revocation
	}
	return nil
}

func (x *DataState_Event) GetServicePolicyChange() *DataState_ServicePolicyChange {
    logtrace.LogWithFunctionName()
	if x, ok := x.GetModel().(*DataState_Event_ServicePolicyChange); ok {
		return x.ServicePolicyChange
	}
	return nil
}

func (x *DataState_Event) GetConfigType() *DataState_ConfigType {
    logtrace.LogWithFunctionName()
	if x, ok := x.GetModel().(*DataState_Event_ConfigType); ok {
		return x.ConfigType
	}
	return nil
}

func (x *DataState_Event) GetConfig() *DataState_Config {
    logtrace.LogWithFunctionName()
	if x, ok := x.GetModel().(*DataState_Event_Config); ok {
		return x.Config
	}
	return nil
}

type isDataState_Event_Model interface {
	isDataState_Event_Model()
}

type DataState_Event_Identity struct {
	Identity *DataState_Identity `protobuf:"bytes,10,opt,name=identity,proto3,oneof"`
}

type DataState_Event_Service struct {
	Service *DataState_Service `protobuf:"bytes,11,opt,name=service,proto3,oneof"`
}

type DataState_Event_ServicePolicy struct {
	ServicePolicy *DataState_ServicePolicy `protobuf:"bytes,12,opt,name=servicePolicy,proto3,oneof"`
}

type DataState_Event_PostureCheck struct {
	PostureCheck *DataState_PostureCheck `protobuf:"bytes,13,opt,name=postureCheck,proto3,oneof"`
}

type DataState_Event_PublicKey struct {
	PublicKey *DataState_PublicKey `protobuf:"bytes,14,opt,name=publicKey,proto3,oneof"`
}

type DataState_Event_Revocation struct {
	Revocation *DataState_Revocation `protobuf:"bytes,15,opt,name=revocation,proto3,oneof"`
}

type DataState_Event_ServicePolicyChange struct {
	ServicePolicyChange *DataState_ServicePolicyChange `protobuf:"bytes,16,opt,name=servicePolicyChange,proto3,oneof"`
}

type DataState_Event_ConfigType struct {
	ConfigType *DataState_ConfigType `protobuf:"bytes,17,opt,name=configType,proto3,oneof"`
}

type DataState_Event_Config struct {
	Config *DataState_Config `protobuf:"bytes,18,opt,name=config,proto3,oneof"`
}

func (*DataState_Event_Identity) isDataState_Event_Model() {
    logtrace.LogWithFunctionName()
}

func (*DataState_Event_Service) isDataState_Event_Model() {
    logtrace.LogWithFunctionName()
}

func (*DataState_Event_ServicePolicy) isDataState_Event_Model() {
    logtrace.LogWithFunctionName()
}

func (*DataState_Event_PostureCheck) isDataState_Event_Model() {
    logtrace.LogWithFunctionName()
}

func (*DataState_Event_PublicKey) isDataState_Event_Model() {
    logtrace.LogWithFunctionName()
}

func (*DataState_Event_Revocation) isDataState_Event_Model() {
    logtrace.LogWithFunctionName()
}

func (*DataState_Event_ServicePolicyChange) isDataState_Event_Model() {
    logtrace.LogWithFunctionName()
}

func (*DataState_Event_ConfigType) isDataState_Event_Model() {
    logtrace.LogWithFunctionName()
}

func (*DataState_Event_Config) isDataState_Event_Model() {
    logtrace.LogWithFunctionName()
}

type DataState_PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data   []byte                      `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`                                                              //public key
	Kid    string                      `protobuf:"bytes,2,opt,name=kid,proto3" json:"kid,omitempty"`                                                                //key id/fingerprint
	Usages []DataState_PublicKey_Usage `protobuf:"varint,3,rep,packed,name=usages,proto3,enum=ziti.edge_ctrl.pb.DataState_PublicKey_Usage" json:"usages,omitempty"` // what the public key in data is used for
	Format DataState_PublicKey_Format  `protobuf:"varint,4,opt,name=format,proto3,enum=ziti.edge_ctrl.pb.DataState_PublicKey_Format" json:"format,omitempty"`       //the format of the public key in data and chain
}

func (x *DataState_PublicKey) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_PublicKey) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_PublicKey) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_PublicKey) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_PublicKey.ProtoReflect.Descriptor instead.
func (*DataState_PublicKey) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 10}
}

func (x *DataState_PublicKey) GetData() []byte {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DataState_PublicKey) GetKid() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Kid
	}
	return ""
}

func (x *DataState_PublicKey) GetUsages() []DataState_PublicKey_Usage {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Usages
	}
	return nil
}

func (x *DataState_PublicKey) GetFormat() DataState_PublicKey_Format {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Format
	}
	return DataState_PublicKey_X509CertDer
}

type DataState_PostureCheck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TypeId string `protobuf:"bytes,4,opt,name=typeId,proto3" json:"typeId,omitempty"`
	// Types that are assignable to Subtype:
	//
	//	*DataState_PostureCheck_Mac_
	//	*DataState_PostureCheck_Mfa_
	//	*DataState_PostureCheck_OsList_
	//	*DataState_PostureCheck_Process_
	//	*DataState_PostureCheck_ProcessMulti_
	//	*DataState_PostureCheck_Domains_
	Subtype isDataState_PostureCheck_Subtype `protobuf_oneof:"subtype"`
}

func (x *DataState_PostureCheck) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_PostureCheck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_PostureCheck) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_PostureCheck) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_PostureCheck) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_PostureCheck.ProtoReflect.Descriptor instead.
func (*DataState_PostureCheck) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 11}
}

func (x *DataState_PostureCheck) GetId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataState_PostureCheck) GetName() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataState_PostureCheck) GetTypeId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.TypeId
	}
	return ""
}

func (m *DataState_PostureCheck) GetSubtype() isDataState_PostureCheck_Subtype {
    logtrace.LogWithFunctionName()
	if m != nil {
		return m.Subtype
	}
	return nil
}

func (x *DataState_PostureCheck) GetMac() *DataState_PostureCheck_Mac {
    logtrace.LogWithFunctionName()
	if x, ok := x.GetSubtype().(*DataState_PostureCheck_Mac_); ok {
		return x.Mac
	}
	return nil
}

func (x *DataState_PostureCheck) GetMfa() *DataState_PostureCheck_Mfa {
    logtrace.LogWithFunctionName()
	if x, ok := x.GetSubtype().(*DataState_PostureCheck_Mfa_); ok {
		return x.Mfa
	}
	return nil
}

func (x *DataState_PostureCheck) GetOsList() *DataState_PostureCheck_OsList {
    logtrace.LogWithFunctionName()
	if x, ok := x.GetSubtype().(*DataState_PostureCheck_OsList_); ok {
		return x.OsList
	}
	return nil
}

func (x *DataState_PostureCheck) GetProcess() *DataState_PostureCheck_Process {
    logtrace.LogWithFunctionName()
	if x, ok := x.GetSubtype().(*DataState_PostureCheck_Process_); ok {
		return x.Process
	}
	return nil
}

func (x *DataState_PostureCheck) GetProcessMulti() *DataState_PostureCheck_ProcessMulti {
    logtrace.LogWithFunctionName()
	if x, ok := x.GetSubtype().(*DataState_PostureCheck_ProcessMulti_); ok {
		return x.ProcessMulti
	}
	return nil
}

func (x *DataState_PostureCheck) GetDomains() *DataState_PostureCheck_Domains {
    logtrace.LogWithFunctionName()
	if x, ok := x.GetSubtype().(*DataState_PostureCheck_Domains_); ok {
		return x.Domains
	}
	return nil
}

type isDataState_PostureCheck_Subtype interface {
	isDataState_PostureCheck_Subtype()
}

type DataState_PostureCheck_Mac_ struct {
	Mac *DataState_PostureCheck_Mac `protobuf:"bytes,7,opt,name=mac,proto3,oneof"`
}

type DataState_PostureCheck_Mfa_ struct {
	Mfa *DataState_PostureCheck_Mfa `protobuf:"bytes,8,opt,name=mfa,proto3,oneof"`
}

type DataState_PostureCheck_OsList_ struct {
	OsList *DataState_PostureCheck_OsList `protobuf:"bytes,9,opt,name=osList,proto3,oneof"`
}

type DataState_PostureCheck_Process_ struct {
	Process *DataState_PostureCheck_Process `protobuf:"bytes,10,opt,name=process,proto3,oneof"`
}

type DataState_PostureCheck_ProcessMulti_ struct {
	ProcessMulti *DataState_PostureCheck_ProcessMulti `protobuf:"bytes,11,opt,name=processMulti,proto3,oneof"`
}

type DataState_PostureCheck_Domains_ struct {
	Domains *DataState_PostureCheck_Domains `protobuf:"bytes,12,opt,name=domains,proto3,oneof"`
}

func (*DataState_PostureCheck_Mac_) isDataState_PostureCheck_Subtype() {
    logtrace.LogWithFunctionName()
}

func (*DataState_PostureCheck_Mfa_) isDataState_PostureCheck_Subtype() {
    logtrace.LogWithFunctionName()
}

func (*DataState_PostureCheck_OsList_) isDataState_PostureCheck_Subtype() {
    logtrace.LogWithFunctionName()
}

func (*DataState_PostureCheck_Process_) isDataState_PostureCheck_Subtype() {
    logtrace.LogWithFunctionName()
}

func (*DataState_PostureCheck_ProcessMulti_) isDataState_PostureCheck_Subtype() {
    logtrace.LogWithFunctionName()
}

func (*DataState_PostureCheck_Domains_) isDataState_PostureCheck_Subtype() {
    logtrace.LogWithFunctionName()
}

type DataState_PostureCheck_Mac struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddresses []string `protobuf:"bytes,1,rep,name=macAddresses,proto3" json:"macAddresses,omitempty"`
}

func (x *DataState_PostureCheck_Mac) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_PostureCheck_Mac{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_PostureCheck_Mac) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_PostureCheck_Mac) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_PostureCheck_Mac) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_PostureCheck_Mac.ProtoReflect.Descriptor instead.
func (*DataState_PostureCheck_Mac) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 11, 0}
}

func (x *DataState_PostureCheck_Mac) GetMacAddresses() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.MacAddresses
	}
	return nil
}

type DataState_PostureCheck_Mfa struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeoutSeconds        int64 `protobuf:"varint,1,opt,name=TimeoutSeconds,proto3" json:"TimeoutSeconds,omitempty"`
	PromptOnWake          bool  `protobuf:"varint,2,opt,name=PromptOnWake,proto3" json:"PromptOnWake,omitempty"`
	PromptOnUnlock        bool  `protobuf:"varint,3,opt,name=PromptOnUnlock,proto3" json:"PromptOnUnlock,omitempty"`
	IgnoreLegacyEndpoints bool  `protobuf:"varint,4,opt,name=IgnoreLegacyEndpoints,proto3" json:"IgnoreLegacyEndpoints,omitempty"`
}

func (x *DataState_PostureCheck_Mfa) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_PostureCheck_Mfa{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_PostureCheck_Mfa) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_PostureCheck_Mfa) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_PostureCheck_Mfa) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_PostureCheck_Mfa.ProtoReflect.Descriptor instead.
func (*DataState_PostureCheck_Mfa) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 11, 1}
}

func (x *DataState_PostureCheck_Mfa) GetTimeoutSeconds() int64 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *DataState_PostureCheck_Mfa) GetPromptOnWake() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.PromptOnWake
	}
	return false
}

func (x *DataState_PostureCheck_Mfa) GetPromptOnUnlock() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.PromptOnUnlock
	}
	return false
}

func (x *DataState_PostureCheck_Mfa) GetIgnoreLegacyEndpoints() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.IgnoreLegacyEndpoints
	}
	return false
}

type DataState_PostureCheck_Os struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsType     string   `protobuf:"bytes,1,opt,name=OsType,proto3" json:"OsType,omitempty"`
	OsVersions []string `protobuf:"bytes,2,rep,name=OsVersions,proto3" json:"OsVersions,omitempty"`
}

func (x *DataState_PostureCheck_Os) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_PostureCheck_Os{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_PostureCheck_Os) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_PostureCheck_Os) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_PostureCheck_Os) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_PostureCheck_Os.ProtoReflect.Descriptor instead.
func (*DataState_PostureCheck_Os) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 11, 2}
}

func (x *DataState_PostureCheck_Os) GetOsType() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *DataState_PostureCheck_Os) GetOsVersions() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.OsVersions
	}
	return nil
}

type DataState_PostureCheck_OsList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsList []*DataState_PostureCheck_Os `protobuf:"bytes,1,rep,name=osList,proto3" json:"osList,omitempty"`
}

func (x *DataState_PostureCheck_OsList) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_PostureCheck_OsList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_PostureCheck_OsList) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_PostureCheck_OsList) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_PostureCheck_OsList) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_PostureCheck_OsList.ProtoReflect.Descriptor instead.
func (*DataState_PostureCheck_OsList) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 11, 3}
}

func (x *DataState_PostureCheck_OsList) GetOsList() []*DataState_PostureCheck_Os {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.OsList
	}
	return nil
}

type DataState_PostureCheck_Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OsType       string   `protobuf:"bytes,1,opt,name=OsType,proto3" json:"OsType,omitempty"`
	Path         string   `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	Hashes       []string `protobuf:"bytes,3,rep,name=Hashes,proto3" json:"Hashes,omitempty"`
	Fingerprints []string `protobuf:"bytes,4,rep,name=Fingerprints,proto3" json:"Fingerprints,omitempty"`
}

func (x *DataState_PostureCheck_Process) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_PostureCheck_Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_PostureCheck_Process) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_PostureCheck_Process) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_PostureCheck_Process) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_PostureCheck_Process.ProtoReflect.Descriptor instead.
func (*DataState_PostureCheck_Process) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 11, 4}
}

func (x *DataState_PostureCheck_Process) GetOsType() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.OsType
	}
	return ""
}

func (x *DataState_PostureCheck_Process) GetPath() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DataState_PostureCheck_Process) GetHashes() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *DataState_PostureCheck_Process) GetFingerprints() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Fingerprints
	}
	return nil
}

type DataState_PostureCheck_ProcessMulti struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Semantic  string                            `protobuf:"bytes,1,opt,name=semantic,proto3" json:"semantic,omitempty"`
	Processes []*DataState_PostureCheck_Process `protobuf:"bytes,2,rep,name=processes,proto3" json:"processes,omitempty"`
}

func (x *DataState_PostureCheck_ProcessMulti) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_PostureCheck_ProcessMulti{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_PostureCheck_ProcessMulti) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_PostureCheck_ProcessMulti) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_PostureCheck_ProcessMulti) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_PostureCheck_ProcessMulti.ProtoReflect.Descriptor instead.
func (*DataState_PostureCheck_ProcessMulti) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 11, 5}
}

func (x *DataState_PostureCheck_ProcessMulti) GetSemantic() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Semantic
	}
	return ""
}

func (x *DataState_PostureCheck_ProcessMulti) GetProcesses() []*DataState_PostureCheck_Process {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Processes
	}
	return nil
}

type DataState_PostureCheck_Domains struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Domains []string `protobuf:"bytes,1,rep,name=domains,proto3" json:"domains,omitempty"`
}

func (x *DataState_PostureCheck_Domains) Reset() {
    logtrace.LogWithFunctionName()
	*x = DataState_PostureCheck_Domains{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataState_PostureCheck_Domains) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*DataState_PostureCheck_Domains) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *DataState_PostureCheck_Domains) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataState_PostureCheck_Domains.ProtoReflect.Descriptor instead.
func (*DataState_PostureCheck_Domains) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{5, 11, 6}
}

func (x *DataState_PostureCheck_Domains) GetDomains() []string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.Domains
	}
	return nil
}

type ConnectEvents_ConnectDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConnectTime int64  `protobuf:"varint,1,opt,name=connectTime,proto3" json:"connectTime,omitempty"`
	SrcAddr     string `protobuf:"bytes,2,opt,name=srcAddr,proto3" json:"srcAddr,omitempty"`
	DstAddr     string `protobuf:"bytes,3,opt,name=dstAddr,proto3" json:"dstAddr,omitempty"`
}

func (x *ConnectEvents_ConnectDetails) Reset() {
    logtrace.LogWithFunctionName()
	*x = ConnectEvents_ConnectDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectEvents_ConnectDetails) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectEvents_ConnectDetails) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *ConnectEvents_ConnectDetails) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectEvents_ConnectDetails.ProtoReflect.Descriptor instead.
func (*ConnectEvents_ConnectDetails) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{41, 0}
}

func (x *ConnectEvents_ConnectDetails) GetConnectTime() int64 {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ConnectTime
	}
	return 0
}

func (x *ConnectEvents_ConnectDetails) GetSrcAddr() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.SrcAddr
	}
	return ""
}

func (x *ConnectEvents_ConnectDetails) GetDstAddr() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.DstAddr
	}
	return ""
}

type ConnectEvents_IdentityConnectEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdentityId   string                          `protobuf:"bytes,1,opt,name=identityId,proto3" json:"identityId,omitempty"`
	IsConnected  bool                            `protobuf:"varint,2,opt,name=isConnected,proto3" json:"isConnected,omitempty"`
	ConnectTimes []*ConnectEvents_ConnectDetails `protobuf:"bytes,3,rep,name=connectTimes,proto3" json:"connectTimes,omitempty"`
}

func (x *ConnectEvents_IdentityConnectEvents) Reset() {
    logtrace.LogWithFunctionName()
	*x = ConnectEvents_IdentityConnectEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_edge_ctrl_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectEvents_IdentityConnectEvents) String() string {
    logtrace.LogWithFunctionName()
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectEvents_IdentityConnectEvents) ProtoMessage() {
    logtrace.LogWithFunctionName()
}

func (x *ConnectEvents_IdentityConnectEvents) ProtoReflect() protoreflect.Message {
    logtrace.LogWithFunctionName()
	mi := &file_edge_ctrl_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectEvents_IdentityConnectEvents.ProtoReflect.Descriptor instead.
func (*ConnectEvents_IdentityConnectEvents) Descriptor() ([]byte, []int) {
    logtrace.LogWithFunctionName()
	return file_edge_ctrl_proto_rawDescGZIP(), []int{41, 1}
}

func (x *ConnectEvents_IdentityConnectEvents) GetIdentityId() string {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.IdentityId
	}
	return ""
}

func (x *ConnectEvents_IdentityConnectEvents) GetIsConnected() bool {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.IsConnected
	}
	return false
}

func (x *ConnectEvents_IdentityConnectEvents) GetConnectTimes() []*ConnectEvents_ConnectDetails {
    logtrace.LogWithFunctionName()
	if x != nil {
		return x.ConnectTimes
	}
	return nil
}

var File_edge_ctrl_proto protoreflect.FileDescriptor

var file_edge_ctrl_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x11, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72,
	0x6c, 0x2e, 0x70, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x02, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x48, 0x0a,
	0x08, 0x62, 0x79, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x62,
	0x79, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3b, 0x0a, 0x0d, 0x42, 0x79, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a,
	0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x7a, 0x0a, 0x08, 0x4c, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x38, 0x0a, 0x09,
	0x61, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x09, 0x61, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x22, 0xb9, 0x02, 0x0a, 0x0b, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x39,
	0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74,
	0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x4b, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x22,
	0xe1, 0x21, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3a, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x1a, 0x30, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x1a, 0x60, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x1a, 0xa0, 0x01, 0x0a, 0x0e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73,
	0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x8a, 0x07, 0x0a,
	0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a,
	0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f,
	0x73, 0x74, 0x12, 0x82, 0x01, 0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x6f,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x44, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x63,
	0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x19, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x63,
	0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x70, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x61, 0x0a, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x75, 0x0a, 0x1e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x63,
	0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x63,
	0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x46, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x73, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6e, 0x0a, 0x13, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x41, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74,
	0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x77, 0x0a, 0x07, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x1a, 0x72, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x7a, 0x69,
	0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x56, 0x0a, 0x0a, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x1a, 0xd0,
	0x01, 0x0a, 0x13, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x49, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x73, 0x12, 0x5f,
	0x0a, 0x11, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x69,
	0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x72, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x64, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x64,
	0x64, 0x1a, 0x81, 0x01, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x53, 0x79, 0x6e, 0x74, 0x68,
	0x65, 0x74, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x79,
	0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x12, 0x3c, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x1a, 0x9e, 0x06, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x3b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x69, 0x73, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x79, 0x6e, 0x74, 0x68, 0x65, 0x74, 0x69, 0x63, 0x12, 0x43,
	0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x00, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65,
	0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x00, 0x52, 0x07, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x7a,
	0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x4f, 0x0a, 0x0c, 0x70, 0x6f, 0x73,
	0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6f,
	0x73, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x46, 0x0a, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x49, 0x0a, 0x0a, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x0a, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a,
	0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69, 0x74,
	0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x48, 0x00, 0x52, 0x13,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e,
	0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x07, 0x0a,
	0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x1a, 0xa6, 0x02, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x7a, 0x69, 0x74,
	0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x45, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x22, 0x38, 0x0a, 0x05, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x11, 0x0a, 0x0d, 0x4a, 0x57, 0x54, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x58, 0x35, 0x30,
	0x39, 0x43, 0x65, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10,
	0x01, 0x22, 0x2c, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x0f, 0x0a, 0x0b, 0x58,
	0x35, 0x30, 0x39, 0x43, 0x65, 0x72, 0x74, 0x44, 0x65, 0x72, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x50, 0x4b, 0x49, 0x58, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x10, 0x01, 0x1a,
	0xa3, 0x09, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x03,
	0x6d, 0x61, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a, 0x69, 0x74, 0x69,
	0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x75, 0x72, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x2e, 0x4d, 0x61, 0x63, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12,
	0x41, 0x0a, 0x03, 0x6d, 0x66, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x7a,
	0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x4d, 0x66, 0x61, 0x48, 0x00, 0x52, 0x03, 0x6d,
	0x66, 0x61, 0x12, 0x4a, 0x0a, 0x06, 0x6f, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63,
	0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x4f, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x31, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x00, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x4d, 0x0a, 0x07, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a,
	0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x75,
	0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x1a, 0x29, 0x0a, 0x03, 0x4d, 0x61,
	0x63, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0xaf, 0x01, 0x0a, 0x03, 0x4d, 0x66, 0x61, 0x12, 0x26, 0x0a,
	0x0e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4f,
	0x6e, 0x57, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x4f, 0x6e, 0x57, 0x61, 0x6b, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f,
	0x6d, 0x70, 0x74, 0x4f, 0x6e, 0x55, 0x6e, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x4f, 0x6e, 0x55, 0x6e, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x34, 0x0a, 0x15, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63,
	0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x15, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x3c, 0x0a, 0x02, 0x4f, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4f,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x4f, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x4e, 0x0a, 0x06, 0x4f, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x44, 0x0a, 0x06, 0x6f, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x2e, 0x4f, 0x73, 0x52, 0x06, 0x6f,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x71, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x4f, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x48, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x48, 0x61,
	0x73, 0x68, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x7b, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x12, 0x4f, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x75, 0x72, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x23, 0x0a, 0x07, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2c, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0a, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x10, 0x02, 0x22, 0x7e, 0x0a, 0x0a, 0x41, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x65, 0x72, 0x74, 0x46,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x10, 0x63, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x0f, 0x41, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x46,
	0x75, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70,
	0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x54, 0x0a, 0x11, 0x41, 0x70, 0x69,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3f,
	0x0a, 0x0b, 0x61, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x41, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x61, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x3d, 0x0a, 0x11, 0x41, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d,
	0x6f, 0x76, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2d,
	0x0a, 0x13, 0x41, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x3a, 0x0a,
	0x0e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0x2d, 0x0a, 0x13, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xcc, 0x02, 0x0a, 0x14, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x51, 0x0a,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x69, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x65,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe1, 0x02, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x49, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x7a, 0x69,
	0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x46, 0x0a,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x7a, 0x69,
	0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc3, 0x03, 0x0a, 0x17,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x54, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74,
	0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x65,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x65, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x70, 0x72, 0x65,
	0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x63,
	0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70,
	0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0xe1, 0x03, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x56, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74,
	0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x63,
	0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x65, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x95, 0x01, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d,
	0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0xaf, 0x01,
	0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x61, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0xd8, 0x02, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x70,
	0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x61, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x69, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x12, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e,
	0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x69, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3f, 0x0a, 0x17, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x9d, 0x01, 0x0a, 0x07, 0x45,
	0x6e, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x4f, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x4f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x73,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f,
	0x73, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x73, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4f, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0xa1, 0x01, 0x0a, 0x07, 0x53,
	0x64, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xa7,
	0x01, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x65, 0x6e,
	0x76, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69,
	0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x45, 0x6e, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x34, 0x0a, 0x07, 0x73, 0x64, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74,
	0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x53, 0x64, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73,
	0x64, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x8a, 0x06, 0x0a, 0x18, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x72, 0x65, 0x66, 0x72, 0x65,
	0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x63, 0x0a, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x52, 0x18, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67,
	0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48,
	0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x70,
	0x70, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x61, 0x70, 0x70, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x73, 0x0a, 0x12,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65,
	0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x61, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x41, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x73, 0x1a, 0x6e, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72,
	0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x02, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x5b, 0x0a, 0x08,
	0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f,
	0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e,
	0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74,
	0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x65, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4b, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x90, 0x04, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x61, 0x70, 0x69, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x69,
	0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67,
	0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x5c, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63,
	0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x7a,
	0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a,
	0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8c, 0x02, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x56, 0x32,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x59, 0x0a,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x50, 0x65, 0x65, 0x72,
	0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf9, 0x02, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x56, 0x32, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x69, 0x72, 0x63, 0x75,
	0x69, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x5a, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74,
	0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x4e, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x7a, 0x69, 0x74, 0x69,
	0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69,
	0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x50,
	0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x6c, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22,
	0xa1, 0x01, 0x0a, 0x0d, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x22, 0xd5, 0x03, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x5a, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3e, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74,
	0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72,
	0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3b,
	0x0a, 0x0d, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xf3, 0x01, 0x0a, 0x1e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x0a, 0x61, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63,
	0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x0a, 0x61, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x7a,
	0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xb7, 0x03, 0x0a, 0x1f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x56, 0x32, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5c, 0x0a,
	0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x40, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x56, 0x32, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x08, 0x70, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12,
	0x47, 0x0a, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72,
	0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x3b,
	0x0a, 0x0d, 0x50, 0x65, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x64, 0x0a, 0x20, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0xec, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x70,
	0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x65, 0x64,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x73, 0x74,
	0x22, 0x9d, 0x01, 0x0a, 0x1d, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x43, 0x73, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x43, 0x73, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x43, 0x73, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x43, 0x73, 0x72, 0x12, 0x30,
	0x0a, 0x13, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x85, 0x01, 0x0a, 0x17, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43,
	0x65, 0x72, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x50, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x50,
	0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74,
	0x50, 0x65, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x65, 0x72, 0x74, 0x50, 0x65, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x43, 0x65,
	0x72, 0x74, 0x73, 0x50, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x43, 0x65, 0x72, 0x74, 0x73, 0x50, 0x65, 0x6d, 0x22, 0x4b, 0x0a, 0x23, 0x45, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x50, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x50, 0x65, 0x6d, 0x22, 0x96, 0x03, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4e, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x75, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x66, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x72, 0x63,
	0x41, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x72, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72, 0x1a, 0xae, 0x01,
	0x0a, 0x15, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x22, 0x66,
	0x0a, 0x1e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c,
	0x2e, 0x70, 0x62, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x66, 0x69, 0x78, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x12, 0x1e,
	0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69,
	0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69,
	0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0xd5,
	0x03, 0x0a, 0x1f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x74, 0x0a, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x7a,
	0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4f, 0x72, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6f, 0x72, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x74, 0x0a, 0x10, 0x63, 0x6f, 0x70, 0x79,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x48, 0x2e, 0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63,
	0x74, 0x72, 0x6c, 0x2e, 0x70, 0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x70, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f,
	0x70, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x3c,
	0x0a, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x7a, 0x69, 0x74, 0x69, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x44, 0x69, 0x66, 0x66, 0x52, 0x05, 0x64, 0x69, 0x66, 0x66, 0x73, 0x1a, 0x43, 0x0a, 0x15,
	0x4f, 0x72, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x43, 0x0a, 0x15, 0x43, 0x6f, 0x70, 0x79, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x99, 0x01, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x40, 0x0a, 0x1b, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x6e, 0x65, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x6e,
	0x65, 0x77, 0x2a, 0xf3, 0x0d, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x65, 0x72, 0x6f, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x0f,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x10,
	0xa0, 0x9c, 0x01, 0x12, 0x15, 0x0a, 0x0f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x48, 0x65, 0x6c,
	0x6c, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x10, 0xa1, 0x9c, 0x01, 0x12, 0x0f, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0xa2, 0x9c, 0x01, 0x12, 0x18, 0x0a, 0x12, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x10, 0x86, 0x9d, 0x01, 0x12, 0x19, 0x0a, 0x13, 0x41, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x10, 0xe8, 0x9d, 0x01,
	0x12, 0x1b, 0x0a, 0x15, 0x41, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x10, 0xe9, 0x9d, 0x01, 0x12, 0x1b, 0x0a,
	0x15, 0x41, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x10, 0xea, 0x9d, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x41, 0x70,
	0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xeb, 0x9d, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x53, 0x79, 0x6e, 0x63,
	0x54, 0x79, 0x70, 0x65, 0x10, 0xec, 0x9d, 0x01, 0x12, 0x1e, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x10, 0xed, 0x9d, 0x01, 0x12, 0x1f, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xee, 0x9d, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xef, 0x9d, 0x01, 0x12, 0x22, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf0, 0x9d, 0x01,
	0x12, 0x21, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10,
	0xf1, 0x9d, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x10, 0xf2, 0x9d, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf3, 0x9d, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf4, 0x9d, 0x01, 0x12, 0x21,
	0x0a, 0x1b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf5, 0x9d,
	0x01, 0x12, 0x15, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x10, 0xf6, 0x9d, 0x01, 0x12, 0x23, 0x0a, 0x1d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x32, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xf8, 0x9d, 0x01, 0x12, 0x24, 0x0a,
	0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10,
	0xf9, 0x9d, 0x01, 0x12, 0x20, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72,
	0x63, 0x75, 0x69, 0x74, 0x56, 0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x10, 0xfa, 0x9d, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x10, 0xfb, 0x9d, 0x01, 0x12, 0x26, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x56,
	0x32, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xfc, 0x9d, 0x01,
	0x12, 0x27, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x56, 0x32, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xfd, 0x9d, 0x01, 0x12, 0x10, 0x0a, 0x0a, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x10, 0xcc, 0x9e, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x45,
	0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xcd, 0x9e, 0x01, 0x12, 0x27,
	0x0a, 0x21, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x10, 0xce, 0x9e, 0x01, 0x12, 0x2d, 0x0a, 0x27, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x10, 0xcf, 0x9e, 0x01, 0x12, 0x21, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xb0, 0x9f, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xb1, 0x9f, 0x01, 0x12, 0x28, 0x0a,
	0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x46, 0x6f,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x10, 0xb2, 0x9f, 0x01, 0x12, 0x29, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xb3,
	0x9f, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xb4, 0x9f,
	0x01, 0x12, 0x15, 0x0a, 0x0f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x10, 0xb5, 0x9f, 0x01, 0x12, 0x27, 0x0a, 0x21, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xb6, 0x9f,
	0x01, 0x12, 0x28, 0x0a, 0x22, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xb7, 0x9f, 0x01, 0x12, 0x27, 0x0a, 0x21, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x10, 0xb8, 0x9f, 0x01, 0x12, 0x28, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xb9, 0x9f, 0x01, 0x12, 0x27,
	0x0a, 0x21, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x10, 0xba, 0x9f, 0x01, 0x12, 0x28, 0x0a, 0x22, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0xbb, 0x9f,
	0x01, 0x12, 0x1b, 0x0a, 0x15, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x48, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0xbc, 0x9f, 0x01, 0x12, 0x29,
	0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x56,
	0x32, 0x54, 0x79, 0x70, 0x65, 0x10, 0xbd, 0x9f, 0x01, 0x12, 0x2a, 0x0a, 0x24, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x56, 0x32, 0x54, 0x79, 0x70,
	0x65, 0x10, 0xbe, 0x9f, 0x01, 0x12, 0x18, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x54, 0x79, 0x70, 0x65, 0x73, 0x10, 0xbf, 0x9f, 0x01, 0x12,
	0x13, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x94, 0xa0, 0x01, 0x12, 0x1c, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x95,
	0xa0, 0x01, 0x12, 0x15, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x10, 0x96, 0xa0, 0x01, 0x12, 0x22, 0x0a, 0x1c, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x97, 0xa0, 0x01, 0x12, 0x23, 0x0a,
	0x1d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x10, 0x98,
	0xa0, 0x01, 0x12, 0x25, 0x0a, 0x1f, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x6f, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x10, 0x99, 0xa0, 0x01, 0x12, 0x1d, 0x0a, 0x17, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x9a, 0xa0, 0x01, 0x2a, 0x21, 0x0a, 0x0b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x69, 0x61, 0x6c, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x69, 0x6e, 0x64, 0x10, 0x01, 0x2a, 0x6e, 0x0a, 0x06, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5a,
	0x65, 0x72, 0x6f, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0c, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x6f, 0x72, 0x49, 0x64, 0x10, 0xfe, 0x07, 0x12, 0x10, 0x0a, 0x0b, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x50, 0x61, 0x73, 0x73, 0x65, 0x64, 0x10, 0xff, 0x07, 0x12, 0x14, 0x0a, 0x0f, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x10, 0x80, 0x08,
	0x12, 0x19, 0x0a, 0x14, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x10, 0x81, 0x08, 0x2a, 0x3f, 0x0a, 0x0a, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a,
	0x44, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x69, 0x6e, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x10, 0x02, 0x2a, 0x7a, 0x0a, 0x1e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x75, 0x72,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x03, 0x2a, 0x3d, 0x0a, 0x14, 0x54, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x65, 0x63, 0x65, 0x64, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x76, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x10, 0x00, 0x12, 0x14,
	0x0a, 0x10, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69,
	0x63, 0x74, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x4f, 0x74,
	0x68, 0x65, 0x72, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x42,
	0x75, 0x73, 0x79, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x49,
	0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x42,
	0x31, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70,
	0x65, 0x6e, 0x7a, 0x69, 0x74, 0x69, 0x2f, 0x7a, 0x69, 0x74, 0x69, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x70, 0x62, 0x2f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x5f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_edge_ctrl_proto_rawDescOnce sync.Once
	file_edge_ctrl_proto_rawDescData = file_edge_ctrl_proto_rawDesc
)

func file_edge_ctrl_proto_rawDescGZIP() []byte {
    logtrace.LogWithFunctionName()
	file_edge_ctrl_proto_rawDescOnce.Do(func() {
		file_edge_ctrl_proto_rawDescData = protoimpl.X.CompressGZIP(file_edge_ctrl_proto_rawDescData)
	})
	return file_edge_ctrl_proto_rawDescData
}

var file_edge_ctrl_proto_enumTypes = make([]protoimpl.EnumInfo, 10)
var file_edge_ctrl_proto_msgTypes = make([]protoimpl.MessageInfo, 91)
var file_edge_ctrl_proto_goTypes = []interface{}{
	(ContentType)(0),                            // 0: ziti.edge_ctrl.pb.ContentType
	(SessionType)(0),                            // 1: ziti.edge_ctrl.pb.SessionType
	(Header)(0),                                 // 2: ziti.edge_ctrl.pb.Header
	(PolicyType)(0),                             // 3: ziti.edge_ctrl.pb.PolicyType
	(ServicePolicyRelatedEntityType)(0),         // 4: ziti.edge_ctrl.pb.ServicePolicyRelatedEntityType
	(TerminatorPrecedence)(0),                   // 5: ziti.edge_ctrl.pb.TerminatorPrecedence
	(CreateTerminatorResult)(0),                 // 6: ziti.edge_ctrl.pb.CreateTerminatorResult
	(DataState_Action)(0),                       // 7: ziti.edge_ctrl.pb.DataState.Action
	(DataState_PublicKey_Usage)(0),              // 8: ziti.edge_ctrl.pb.DataState.PublicKey.Usage
	(DataState_PublicKey_Format)(0),             // 9: ziti.edge_ctrl.pb.DataState.PublicKey.Format
	(*ServerHello)(nil),                         // 10: ziti.edge_ctrl.pb.ServerHello
	(*Address)(nil),                             // 11: ziti.edge_ctrl.pb.Address
	(*Listener)(nil),                            // 12: ziti.edge_ctrl.pb.Listener
	(*ClientHello)(nil),                         // 13: ziti.edge_ctrl.pb.ClientHello
	(*Error)(nil),                               // 14: ziti.edge_ctrl.pb.Error
	(*DataState)(nil),                           // 15: ziti.edge_ctrl.pb.DataState
	(*ApiSession)(nil),                          // 16: ziti.edge_ctrl.pb.ApiSession
	(*ApiSessionAdded)(nil),                     // 17: ziti.edge_ctrl.pb.ApiSessionAdded
	(*ApiSessionUpdated)(nil),                   // 18: ziti.edge_ctrl.pb.ApiSessionUpdated
	(*ApiSessionRemoved)(nil),                   // 19: ziti.edge_ctrl.pb.ApiSessionRemoved
	(*ApiSessionHeartbeat)(nil),                 // 20: ziti.edge_ctrl.pb.ApiSessionHeartbeat
	(*SessionRemoved)(nil),                      // 21: ziti.edge_ctrl.pb.SessionRemoved
	(*RequestClientReSync)(nil),                 // 22: ziti.edge_ctrl.pb.RequestClientReSync
	(*CreateCircuitRequest)(nil),                // 23: ziti.edge_ctrl.pb.CreateCircuitRequest
	(*CreateCircuitResponse)(nil),               // 24: ziti.edge_ctrl.pb.CreateCircuitResponse
	(*CreateTerminatorRequest)(nil),             // 25: ziti.edge_ctrl.pb.CreateTerminatorRequest
	(*CreateTerminatorV2Request)(nil),           // 26: ziti.edge_ctrl.pb.CreateTerminatorV2Request
	(*CreateTerminatorV2Response)(nil),          // 27: ziti.edge_ctrl.pb.CreateTerminatorV2Response
	(*RemoveTerminatorRequest)(nil),             // 28: ziti.edge_ctrl.pb.RemoveTerminatorRequest
	(*UpdateTerminatorRequest)(nil),             // 29: ziti.edge_ctrl.pb.UpdateTerminatorRequest
	(*HealthEventRequest)(nil),                  // 30: ziti.edge_ctrl.pb.HealthEventRequest
	(*ValidateSessionsRequest)(nil),             // 31: ziti.edge_ctrl.pb.ValidateSessionsRequest
	(*EnvInfo)(nil),                             // 32: ziti.edge_ctrl.pb.EnvInfo
	(*SdkInfo)(nil),                             // 33: ziti.edge_ctrl.pb.SdkInfo
	(*CreateApiSessionRequest)(nil),             // 34: ziti.edge_ctrl.pb.CreateApiSessionRequest
	(*CreateApiSessionResponse)(nil),            // 35: ziti.edge_ctrl.pb.CreateApiSessionResponse
	(*CreateCircuitForServiceRequest)(nil),      // 36: ziti.edge_ctrl.pb.CreateCircuitForServiceRequest
	(*CreateSessionResponse)(nil),               // 37: ziti.edge_ctrl.pb.CreateSessionResponse
	(*CreateCircuitForServiceResponse)(nil),     // 38: ziti.edge_ctrl.pb.CreateCircuitForServiceResponse
	(*CreateTunnelCircuitV2Request)(nil),        // 39: ziti.edge_ctrl.pb.CreateTunnelCircuitV2Request
	(*CreateTunnelCircuitV2Response)(nil),       // 40: ziti.edge_ctrl.pb.CreateTunnelCircuitV2Response
	(*ServicesList)(nil),                        // 41: ziti.edge_ctrl.pb.ServicesList
	(*TunnelService)(nil),                       // 42: ziti.edge_ctrl.pb.TunnelService
	(*CreateTunnelTerminatorRequest)(nil),       // 43: ziti.edge_ctrl.pb.CreateTunnelTerminatorRequest
	(*CreateTunnelTerminatorResponse)(nil),      // 44: ziti.edge_ctrl.pb.CreateTunnelTerminatorResponse
	(*CreateTunnelTerminatorRequestV2)(nil),     // 45: ziti.edge_ctrl.pb.CreateTunnelTerminatorRequestV2
	(*CreateTunnelTerminatorResponseV2)(nil),    // 46: ziti.edge_ctrl.pb.CreateTunnelTerminatorResponseV2
	(*UpdateTunnelTerminatorRequest)(nil),       // 47: ziti.edge_ctrl.pb.UpdateTunnelTerminatorRequest
	(*EnrollmentExtendRouterRequest)(nil),       // 48: ziti.edge_ctrl.pb.EnrollmentExtendRouterRequest
	(*EnrollmentCertsResponse)(nil),             // 49: ziti.edge_ctrl.pb.EnrollmentCertsResponse
	(*EnrollmentExtendRouterVerifyRequest)(nil), // 50: ziti.edge_ctrl.pb.EnrollmentExtendRouterVerifyRequest
	(*ConnectEvents)(nil),                       // 51: ziti.edge_ctrl.pb.ConnectEvents
	(*RouterDataModelValidateRequest)(nil),      // 52: ziti.edge_ctrl.pb.RouterDataModelValidateRequest
	(*RouterDataModelDiff)(nil),                 // 53: ziti.edge_ctrl.pb.RouterDataModelDiff
	(*RouterDataModelValidateResponse)(nil),     // 54: ziti.edge_ctrl.pb.RouterDataModelValidateResponse
	(*SubscribeToDataModelRequest)(nil),         // 55: ziti.edge_ctrl.pb.SubscribeToDataModelRequest
	nil,                                         // 56: ziti.edge_ctrl.pb.ServerHello.DataEntry
	nil,                                         // 57: ziti.edge_ctrl.pb.ServerHello.ByteDataEntry
	nil,                                         // 58: ziti.edge_ctrl.pb.ClientHello.DataEntry
	(*DataState_ConfigType)(nil),                // 59: ziti.edge_ctrl.pb.DataState.ConfigType
	(*DataState_Config)(nil),                    // 60: ziti.edge_ctrl.pb.DataState.Config
	(*DataState_ServiceConfigs)(nil),            // 61: ziti.edge_ctrl.pb.DataState.ServiceConfigs
	(*DataState_Identity)(nil),                  // 62: ziti.edge_ctrl.pb.DataState.Identity
	(*DataState_Service)(nil),                   // 63: ziti.edge_ctrl.pb.DataState.Service
	(*DataState_ServicePolicy)(nil),             // 64: ziti.edge_ctrl.pb.DataState.ServicePolicy
	(*DataState_Revocation)(nil),                // 65: ziti.edge_ctrl.pb.DataState.Revocation
	(*DataState_ServicePolicyChange)(nil),       // 66: ziti.edge_ctrl.pb.DataState.ServicePolicyChange
	(*DataState_ChangeSet)(nil),                 // 67: ziti.edge_ctrl.pb.DataState.ChangeSet
	(*DataState_Event)(nil),                     // 68: ziti.edge_ctrl.pb.DataState.Event
	(*DataState_PublicKey)(nil),                 // 69: ziti.edge_ctrl.pb.DataState.PublicKey
	(*DataState_PostureCheck)(nil),              // 70: ziti.edge_ctrl.pb.DataState.PostureCheck
	nil,                                         // 71: ziti.edge_ctrl.pb.DataState.ServiceConfigs.ConfigsEntry
	nil,                                         // 72: ziti.edge_ctrl.pb.DataState.Identity.ServiceHostingPrecedencesEntry
	nil,                                         // 73: ziti.edge_ctrl.pb.DataState.Identity.ServiceHostingCostsEntry
	nil,                                         // 74: ziti.edge_ctrl.pb.DataState.Identity.ServiceConfigsEntry
	(*DataState_PostureCheck_Mac)(nil),          // 75: ziti.edge_ctrl.pb.DataState.PostureCheck.Mac
	(*DataState_PostureCheck_Mfa)(nil),          // 76: ziti.edge_ctrl.pb.DataState.PostureCheck.Mfa
	(*DataState_PostureCheck_Os)(nil),           // 77: ziti.edge_ctrl.pb.DataState.PostureCheck.Os
	(*DataState_PostureCheck_OsList)(nil),       // 78: ziti.edge_ctrl.pb.DataState.PostureCheck.OsList
	(*DataState_PostureCheck_Process)(nil),      // 79: ziti.edge_ctrl.pb.DataState.PostureCheck.Process
	(*DataState_PostureCheck_ProcessMulti)(nil), // 80: ziti.edge_ctrl.pb.DataState.PostureCheck.ProcessMulti
	(*DataState_PostureCheck_Domains)(nil),      // 81: ziti.edge_ctrl.pb.DataState.PostureCheck.Domains
	nil,                                         // 82: ziti.edge_ctrl.pb.CreateCircuitRequest.PeerDataEntry
	nil,                                         // 83: ziti.edge_ctrl.pb.CreateCircuitResponse.PeerDataEntry
	nil,                                         // 84: ziti.edge_ctrl.pb.CreateCircuitResponse.TagsEntry
	nil,                                         // 85: ziti.edge_ctrl.pb.CreateTerminatorRequest.PeerDataEntry
	nil,                                         // 86: ziti.edge_ctrl.pb.CreateTerminatorV2Request.PeerDataEntry
	nil,                                         // 87: ziti.edge_ctrl.pb.CreateApiSessionResponse.ServicePrecedencesEntry
	nil,                                         // 88: ziti.edge_ctrl.pb.CreateApiSessionResponse.ServiceCostsEntry
	nil,                                         // 89: ziti.edge_ctrl.pb.CreateCircuitForServiceRequest.PeerDataEntry
	nil,                                         // 90: ziti.edge_ctrl.pb.CreateCircuitForServiceResponse.PeerDataEntry
	nil,                                         // 91: ziti.edge_ctrl.pb.CreateCircuitForServiceResponse.TagsEntry
	nil,                                         // 92: ziti.edge_ctrl.pb.CreateTunnelCircuitV2Request.PeerDataEntry
	nil,                                         // 93: ziti.edge_ctrl.pb.CreateTunnelCircuitV2Response.PeerDataEntry
	nil,                                         // 94: ziti.edge_ctrl.pb.CreateTunnelCircuitV2Response.TagsEntry
	nil,                                         // 95: ziti.edge_ctrl.pb.CreateTunnelTerminatorRequest.PeerDataEntry
	nil,                                         // 96: ziti.edge_ctrl.pb.CreateTunnelTerminatorRequestV2.PeerDataEntry
	(*ConnectEvents_ConnectDetails)(nil),        // 97: ziti.edge_ctrl.pb.ConnectEvents.ConnectDetails
	(*ConnectEvents_IdentityConnectEvents)(nil), // 98: ziti.edge_ctrl.pb.ConnectEvents.IdentityConnectEvents
	nil,                           // 99: ziti.edge_ctrl.pb.RouterDataModelValidateResponse.OrigEntityCountsEntry
	nil,                           // 100: ziti.edge_ctrl.pb.RouterDataModelValidateResponse.CopyEntityCountsEntry
	(*timestamppb.Timestamp)(nil), // 101: google.protobuf.Timestamp
}
var file_edge_ctrl_proto_depIdxs = []int32{
	56,  // 0: ziti.edge_ctrl.pb.ServerHello.data:type_name -> ziti.edge_ctrl.pb.ServerHello.DataEntry
	57,  // 1: ziti.edge_ctrl.pb.ServerHello.byteData:type_name -> ziti.edge_ctrl.pb.ServerHello.ByteDataEntry
	11,  // 2: ziti.edge_ctrl.pb.Listener.address:type_name -> ziti.edge_ctrl.pb.Address
	11,  // 3: ziti.edge_ctrl.pb.Listener.advertise:type_name -> ziti.edge_ctrl.pb.Address
	58,  // 4: ziti.edge_ctrl.pb.ClientHello.data:type_name -> ziti.edge_ctrl.pb.ClientHello.DataEntry
	12,  // 5: ziti.edge_ctrl.pb.ClientHello.listeners:type_name -> ziti.edge_ctrl.pb.Listener
	68,  // 6: ziti.edge_ctrl.pb.DataState.events:type_name -> ziti.edge_ctrl.pb.DataState.Event
	16,  // 7: ziti.edge_ctrl.pb.ApiSessionAdded.apiSessions:type_name -> ziti.edge_ctrl.pb.ApiSession
	16,  // 8: ziti.edge_ctrl.pb.ApiSessionUpdated.apiSessions:type_name -> ziti.edge_ctrl.pb.ApiSession
	82,  // 9: ziti.edge_ctrl.pb.CreateCircuitRequest.peerData:type_name -> ziti.edge_ctrl.pb.CreateCircuitRequest.PeerDataEntry
	83,  // 10: ziti.edge_ctrl.pb.CreateCircuitResponse.peerData:type_name -> ziti.edge_ctrl.pb.CreateCircuitResponse.PeerDataEntry
	84,  // 11: ziti.edge_ctrl.pb.CreateCircuitResponse.tags:type_name -> ziti.edge_ctrl.pb.CreateCircuitResponse.TagsEntry
	85,  // 12: ziti.edge_ctrl.pb.CreateTerminatorRequest.peerData:type_name -> ziti.edge_ctrl.pb.CreateTerminatorRequest.PeerDataEntry
	5,   // 13: ziti.edge_ctrl.pb.CreateTerminatorRequest.precedence:type_name -> ziti.edge_ctrl.pb.TerminatorPrecedence
	86,  // 14: ziti.edge_ctrl.pb.CreateTerminatorV2Request.peerData:type_name -> ziti.edge_ctrl.pb.CreateTerminatorV2Request.PeerDataEntry
	5,   // 15: ziti.edge_ctrl.pb.CreateTerminatorV2Request.precedence:type_name -> ziti.edge_ctrl.pb.TerminatorPrecedence
	6,   // 16: ziti.edge_ctrl.pb.CreateTerminatorV2Response.result:type_name -> ziti.edge_ctrl.pb.CreateTerminatorResult
	5,   // 17: ziti.edge_ctrl.pb.UpdateTerminatorRequest.precedence:type_name -> ziti.edge_ctrl.pb.TerminatorPrecedence
	32,  // 18: ziti.edge_ctrl.pb.CreateApiSessionRequest.envInfo:type_name -> ziti.edge_ctrl.pb.EnvInfo
	33,  // 19: ziti.edge_ctrl.pb.CreateApiSessionRequest.sdkInfo:type_name -> ziti.edge_ctrl.pb.SdkInfo
	5,   // 20: ziti.edge_ctrl.pb.CreateApiSessionResponse.defaultHostingPrecedence:type_name -> ziti.edge_ctrl.pb.TerminatorPrecedence
	87,  // 21: ziti.edge_ctrl.pb.CreateApiSessionResponse.servicePrecedences:type_name -> ziti.edge_ctrl.pb.CreateApiSessionResponse.ServicePrecedencesEntry
	88,  // 22: ziti.edge_ctrl.pb.CreateApiSessionResponse.serviceCosts:type_name -> ziti.edge_ctrl.pb.CreateApiSessionResponse.ServiceCostsEntry
	89,  // 23: ziti.edge_ctrl.pb.CreateCircuitForServiceRequest.peerData:type_name -> ziti.edge_ctrl.pb.CreateCircuitForServiceRequest.PeerDataEntry
	35,  // 24: ziti.edge_ctrl.pb.CreateCircuitForServiceResponse.apiSession:type_name -> ziti.edge_ctrl.pb.CreateApiSessionResponse
	37,  // 25: ziti.edge_ctrl.pb.CreateCircuitForServiceResponse.session:type_name -> ziti.edge_ctrl.pb.CreateSessionResponse
	90,  // 26: ziti.edge_ctrl.pb.CreateCircuitForServiceResponse.peerData:type_name -> ziti.edge_ctrl.pb.CreateCircuitForServiceResponse.PeerDataEntry
	91,  // 27: ziti.edge_ctrl.pb.CreateCircuitForServiceResponse.tags:type_name -> ziti.edge_ctrl.pb.CreateCircuitForServiceResponse.TagsEntry
	92,  // 28: ziti.edge_ctrl.pb.CreateTunnelCircuitV2Request.peerData:type_name -> ziti.edge_ctrl.pb.CreateTunnelCircuitV2Request.PeerDataEntry
	93,  // 29: ziti.edge_ctrl.pb.CreateTunnelCircuitV2Response.peerData:type_name -> ziti.edge_ctrl.pb.CreateTunnelCircuitV2Response.PeerDataEntry
	94,  // 30: ziti.edge_ctrl.pb.CreateTunnelCircuitV2Response.tags:type_name -> ziti.edge_ctrl.pb.CreateTunnelCircuitV2Response.TagsEntry
	42,  // 31: ziti.edge_ctrl.pb.ServicesList.services:type_name -> ziti.edge_ctrl.pb.TunnelService
	95,  // 32: ziti.edge_ctrl.pb.CreateTunnelTerminatorRequest.peerData:type_name -> ziti.edge_ctrl.pb.CreateTunnelTerminatorRequest.PeerDataEntry
	5,   // 33: ziti.edge_ctrl.pb.CreateTunnelTerminatorRequest.precedence:type_name -> ziti.edge_ctrl.pb.TerminatorPrecedence
	35,  // 34: ziti.edge_ctrl.pb.CreateTunnelTerminatorResponse.apiSession:type_name -> ziti.edge_ctrl.pb.CreateApiSessionResponse
	37,  // 35: ziti.edge_ctrl.pb.CreateTunnelTerminatorResponse.session:type_name -> ziti.edge_ctrl.pb.CreateSessionResponse
	96,  // 36: ziti.edge_ctrl.pb.CreateTunnelTerminatorRequestV2.peerData:type_name -> ziti.edge_ctrl.pb.CreateTunnelTerminatorRequestV2.PeerDataEntry
	5,   // 37: ziti.edge_ctrl.pb.CreateTunnelTerminatorRequestV2.precedence:type_name -> ziti.edge_ctrl.pb.TerminatorPrecedence
	5,   // 38: ziti.edge_ctrl.pb.UpdateTunnelTerminatorRequest.precedence:type_name -> ziti.edge_ctrl.pb.TerminatorPrecedence
	98,  // 39: ziti.edge_ctrl.pb.ConnectEvents.events:type_name -> ziti.edge_ctrl.pb.ConnectEvents.IdentityConnectEvents
	15,  // 40: ziti.edge_ctrl.pb.RouterDataModelValidateRequest.state:type_name -> ziti.edge_ctrl.pb.DataState
	99,  // 41: ziti.edge_ctrl.pb.RouterDataModelValidateResponse.origEntityCounts:type_name -> ziti.edge_ctrl.pb.RouterDataModelValidateResponse.OrigEntityCountsEntry
	100, // 42: ziti.edge_ctrl.pb.RouterDataModelValidateResponse.copyEntityCounts:type_name -> ziti.edge_ctrl.pb.RouterDataModelValidateResponse.CopyEntityCountsEntry
	53,  // 43: ziti.edge_ctrl.pb.RouterDataModelValidateResponse.diffs:type_name -> ziti.edge_ctrl.pb.RouterDataModelDiff
	71,  // 44: ziti.edge_ctrl.pb.DataState.ServiceConfigs.configs:type_name -> ziti.edge_ctrl.pb.DataState.ServiceConfigs.ConfigsEntry
	5,   // 45: ziti.edge_ctrl.pb.DataState.Identity.defaultHostingPrecedence:type_name -> ziti.edge_ctrl.pb.TerminatorPrecedence
	72,  // 46: ziti.edge_ctrl.pb.DataState.Identity.serviceHostingPrecedences:type_name -> ziti.edge_ctrl.pb.DataState.Identity.ServiceHostingPrecedencesEntry
	73,  // 47: ziti.edge_ctrl.pb.DataState.Identity.serviceHostingCosts:type_name -> ziti.edge_ctrl.pb.DataState.Identity.ServiceHostingCostsEntry
	74,  // 48: ziti.edge_ctrl.pb.DataState.Identity.serviceConfigs:type_name -> ziti.edge_ctrl.pb.DataState.Identity.ServiceConfigsEntry
	3,   // 49: ziti.edge_ctrl.pb.DataState.ServicePolicy.policyType:type_name -> ziti.edge_ctrl.pb.PolicyType
	101, // 50: ziti.edge_ctrl.pb.DataState.Revocation.ExpiresAt:type_name -> google.protobuf.Timestamp
	4,   // 51: ziti.edge_ctrl.pb.DataState.ServicePolicyChange.relatedEntityType:type_name -> ziti.edge_ctrl.pb.ServicePolicyRelatedEntityType
	68,  // 52: ziti.edge_ctrl.pb.DataState.ChangeSet.changes:type_name -> ziti.edge_ctrl.pb.DataState.Event
	7,   // 53: ziti.edge_ctrl.pb.DataState.Event.action:type_name -> ziti.edge_ctrl.pb.DataState.Action
	62,  // 54: ziti.edge_ctrl.pb.DataState.Event.identity:type_name -> ziti.edge_ctrl.pb.DataState.Identity
	63,  // 55: ziti.edge_ctrl.pb.DataState.Event.service:type_name -> ziti.edge_ctrl.pb.DataState.Service
	64,  // 56: ziti.edge_ctrl.pb.DataState.Event.servicePolicy:type_name -> ziti.edge_ctrl.pb.DataState.ServicePolicy
	70,  // 57: ziti.edge_ctrl.pb.DataState.Event.postureCheck:type_name -> ziti.edge_ctrl.pb.DataState.PostureCheck
	69,  // 58: ziti.edge_ctrl.pb.DataState.Event.publicKey:type_name -> ziti.edge_ctrl.pb.DataState.PublicKey
	65,  // 59: ziti.edge_ctrl.pb.DataState.Event.revocation:type_name -> ziti.edge_ctrl.pb.DataState.Revocation
	66,  // 60: ziti.edge_ctrl.pb.DataState.Event.servicePolicyChange:type_name -> ziti.edge_ctrl.pb.DataState.ServicePolicyChange
	59,  // 61: ziti.edge_ctrl.pb.DataState.Event.configType:type_name -> ziti.edge_ctrl.pb.DataState.ConfigType
	60,  // 62: ziti.edge_ctrl.pb.DataState.Event.config:type_name -> ziti.edge_ctrl.pb.DataState.Config
	8,   // 63: ziti.edge_ctrl.pb.DataState.PublicKey.usages:type_name -> ziti.edge_ctrl.pb.DataState.PublicKey.Usage
	9,   // 64: ziti.edge_ctrl.pb.DataState.PublicKey.format:type_name -> ziti.edge_ctrl.pb.DataState.PublicKey.Format
	75,  // 65: ziti.edge_ctrl.pb.DataState.PostureCheck.mac:type_name -> ziti.edge_ctrl.pb.DataState.PostureCheck.Mac
	76,  // 66: ziti.edge_ctrl.pb.DataState.PostureCheck.mfa:type_name -> ziti.edge_ctrl.pb.DataState.PostureCheck.Mfa
	78,  // 67: ziti.edge_ctrl.pb.DataState.PostureCheck.osList:type_name -> ziti.edge_ctrl.pb.DataState.PostureCheck.OsList
	79,  // 68: ziti.edge_ctrl.pb.DataState.PostureCheck.process:type_name -> ziti.edge_ctrl.pb.DataState.PostureCheck.Process
	80,  // 69: ziti.edge_ctrl.pb.DataState.PostureCheck.processMulti:type_name -> ziti.edge_ctrl.pb.DataState.PostureCheck.ProcessMulti
	81,  // 70: ziti.edge_ctrl.pb.DataState.PostureCheck.domains:type_name -> ziti.edge_ctrl.pb.DataState.PostureCheck.Domains
	5,   // 71: ziti.edge_ctrl.pb.DataState.Identity.ServiceHostingPrecedencesEntry.value:type_name -> ziti.edge_ctrl.pb.TerminatorPrecedence
	61,  // 72: ziti.edge_ctrl.pb.DataState.Identity.ServiceConfigsEntry.value:type_name -> ziti.edge_ctrl.pb.DataState.ServiceConfigs
	77,  // 73: ziti.edge_ctrl.pb.DataState.PostureCheck.OsList.osList:type_name -> ziti.edge_ctrl.pb.DataState.PostureCheck.Os
	79,  // 74: ziti.edge_ctrl.pb.DataState.PostureCheck.ProcessMulti.processes:type_name -> ziti.edge_ctrl.pb.DataState.PostureCheck.Process
	5,   // 75: ziti.edge_ctrl.pb.CreateApiSessionResponse.ServicePrecedencesEntry.value:type_name -> ziti.edge_ctrl.pb.TerminatorPrecedence
	97,  // 76: ziti.edge_ctrl.pb.ConnectEvents.IdentityConnectEvents.connectTimes:type_name -> ziti.edge_ctrl.pb.ConnectEvents.ConnectDetails
	77,  // [77:77] is the sub-list for method output_type
	77,  // [77:77] is the sub-list for method input_type
	77,  // [77:77] is the sub-list for extension type_name
	77,  // [77:77] is the sub-list for extension extendee
	0,   // [0:77] is the sub-list for field type_name
}

func init() { 
	file_edge_ctrl_proto_init()
    logtrace.LogWithFunctionName()
}
func file_edge_ctrl_proto_init() {
    logtrace.LogWithFunctionName()
	if File_edge_ctrl_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_edge_ctrl_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientHello); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiSessionAdded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiSessionUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiSessionRemoved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiSessionHeartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionRemoved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestClientReSync); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCircuitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCircuitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTerminatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTerminatorV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTerminatorV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTerminatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTerminatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HealthEventRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidateSessionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SdkInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApiSessionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateApiSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCircuitForServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSessionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCircuitForServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelCircuitV2Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelCircuitV2Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServicesList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelTerminatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelTerminatorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelTerminatorRequestV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTunnelTerminatorResponseV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTunnelTerminatorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrollmentExtendRouterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrollmentCertsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnrollmentExtendRouterVerifyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterDataModelValidateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterDataModelDiff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterDataModelValidateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeToDataModelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_ConfigType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_ServiceConfigs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_Identity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_ServicePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_Revocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_ServicePolicyChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_ChangeSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_PostureCheck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_PostureCheck_Mac); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_PostureCheck_Mfa); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_PostureCheck_Os); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_PostureCheck_OsList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_PostureCheck_Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_PostureCheck_ProcessMulti); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataState_PostureCheck_Domains); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectEvents_ConnectDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_edge_ctrl_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectEvents_IdentityConnectEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_edge_ctrl_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*DataState_Event_Identity)(nil),
		(*DataState_Event_Service)(nil),
		(*DataState_Event_ServicePolicy)(nil),
		(*DataState_Event_PostureCheck)(nil),
		(*DataState_Event_PublicKey)(nil),
		(*DataState_Event_Revocation)(nil),
		(*DataState_Event_ServicePolicyChange)(nil),
		(*DataState_Event_ConfigType)(nil),
		(*DataState_Event_Config)(nil),
	}
	file_edge_ctrl_proto_msgTypes[60].OneofWrappers = []interface{}{
		(*DataState_PostureCheck_Mac_)(nil),
		(*DataState_PostureCheck_Mfa_)(nil),
		(*DataState_PostureCheck_OsList_)(nil),
		(*DataState_PostureCheck_Process_)(nil),
		(*DataState_PostureCheck_ProcessMulti_)(nil),
		(*DataState_PostureCheck_Domains_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_edge_ctrl_proto_rawDesc,
			NumEnums:      10,
			NumMessages:   91,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_edge_ctrl_proto_goTypes,
		DependencyIndexes: file_edge_ctrl_proto_depIdxs,
		EnumInfos:         file_edge_ctrl_proto_enumTypes,
		MessageInfos:      file_edge_ctrl_proto_msgTypes,
	}.Build()
	File_edge_ctrl_proto = out.File
	file_edge_ctrl_proto_rawDesc = nil
	file_edge_ctrl_proto_goTypes = nil
	file_edge_ctrl_proto_depIdxs = nil
}
