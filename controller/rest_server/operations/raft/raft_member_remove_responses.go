// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package raft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"ztna-core/ztna/logtrace"
	"net/http"

	"github.com/go-openapi/runtime"

	"ztna-core/ztna/controller/rest_model"
)

// RaftMemberRemoveOKCode is the HTTP code returned for type RaftMemberRemoveOK
const RaftMemberRemoveOKCode int = 200

/*RaftMemberRemoveOK Base empty response

swagger:response raftMemberRemoveOK
*/
type RaftMemberRemoveOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.Empty `json:"body,omitempty"`
}

// NewRaftMemberRemoveOK creates RaftMemberRemoveOK with default headers values
func NewRaftMemberRemoveOK() *RaftMemberRemoveOK {
    logtrace.LogWithFunctionName()

	return &RaftMemberRemoveOK{}
}

// WithPayload adds the payload to the raft member remove o k response
func (o *RaftMemberRemoveOK) WithPayload(payload *rest_model.Empty) *RaftMemberRemoveOK {
    logtrace.LogWithFunctionName()
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the raft member remove o k response
func (o *RaftMemberRemoveOK) SetPayload(payload *rest_model.Empty) {
    logtrace.LogWithFunctionName()
	o.Payload = payload
}

// WriteResponse to the client
func (o *RaftMemberRemoveOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
    logtrace.LogWithFunctionName()

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RaftMemberRemoveBadRequestCode is the HTTP code returned for type RaftMemberRemoveBadRequest
const RaftMemberRemoveBadRequestCode int = 400

/*RaftMemberRemoveBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response raftMemberRemoveBadRequest
*/
type RaftMemberRemoveBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewRaftMemberRemoveBadRequest creates RaftMemberRemoveBadRequest with default headers values
func NewRaftMemberRemoveBadRequest() *RaftMemberRemoveBadRequest {
    logtrace.LogWithFunctionName()

	return &RaftMemberRemoveBadRequest{}
}

// WithPayload adds the payload to the raft member remove bad request response
func (o *RaftMemberRemoveBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *RaftMemberRemoveBadRequest {
    logtrace.LogWithFunctionName()
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the raft member remove bad request response
func (o *RaftMemberRemoveBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
    logtrace.LogWithFunctionName()
	o.Payload = payload
}

// WriteResponse to the client
func (o *RaftMemberRemoveBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
    logtrace.LogWithFunctionName()

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RaftMemberRemoveUnauthorizedCode is the HTTP code returned for type RaftMemberRemoveUnauthorized
const RaftMemberRemoveUnauthorizedCode int = 401

/*RaftMemberRemoveUnauthorized The currently supplied session does not have the correct access rights to request this resource

swagger:response raftMemberRemoveUnauthorized
*/
type RaftMemberRemoveUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewRaftMemberRemoveUnauthorized creates RaftMemberRemoveUnauthorized with default headers values
func NewRaftMemberRemoveUnauthorized() *RaftMemberRemoveUnauthorized {
    logtrace.LogWithFunctionName()

	return &RaftMemberRemoveUnauthorized{}
}

// WithPayload adds the payload to the raft member remove unauthorized response
func (o *RaftMemberRemoveUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *RaftMemberRemoveUnauthorized {
    logtrace.LogWithFunctionName()
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the raft member remove unauthorized response
func (o *RaftMemberRemoveUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
    logtrace.LogWithFunctionName()
	o.Payload = payload
}

// WriteResponse to the client
func (o *RaftMemberRemoveUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
    logtrace.LogWithFunctionName()

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RaftMemberRemoveNotFoundCode is the HTTP code returned for type RaftMemberRemoveNotFound
const RaftMemberRemoveNotFoundCode int = 404

/*RaftMemberRemoveNotFound The requested resource does not exist

swagger:response raftMemberRemoveNotFound
*/
type RaftMemberRemoveNotFound struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewRaftMemberRemoveNotFound creates RaftMemberRemoveNotFound with default headers values
func NewRaftMemberRemoveNotFound() *RaftMemberRemoveNotFound {
    logtrace.LogWithFunctionName()

	return &RaftMemberRemoveNotFound{}
}

// WithPayload adds the payload to the raft member remove not found response
func (o *RaftMemberRemoveNotFound) WithPayload(payload *rest_model.APIErrorEnvelope) *RaftMemberRemoveNotFound {
    logtrace.LogWithFunctionName()
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the raft member remove not found response
func (o *RaftMemberRemoveNotFound) SetPayload(payload *rest_model.APIErrorEnvelope) {
    logtrace.LogWithFunctionName()
	o.Payload = payload
}

// WriteResponse to the client
func (o *RaftMemberRemoveNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
    logtrace.LogWithFunctionName()

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RaftMemberRemoveTooManyRequestsCode is the HTTP code returned for type RaftMemberRemoveTooManyRequests
const RaftMemberRemoveTooManyRequestsCode int = 429

/*RaftMemberRemoveTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response raftMemberRemoveTooManyRequests
*/
type RaftMemberRemoveTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewRaftMemberRemoveTooManyRequests creates RaftMemberRemoveTooManyRequests with default headers values
func NewRaftMemberRemoveTooManyRequests() *RaftMemberRemoveTooManyRequests {
    logtrace.LogWithFunctionName()

	return &RaftMemberRemoveTooManyRequests{}
}

// WithPayload adds the payload to the raft member remove too many requests response
func (o *RaftMemberRemoveTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *RaftMemberRemoveTooManyRequests {
    logtrace.LogWithFunctionName()
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the raft member remove too many requests response
func (o *RaftMemberRemoveTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
    logtrace.LogWithFunctionName()
	o.Payload = payload
}

// WriteResponse to the client
func (o *RaftMemberRemoveTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
    logtrace.LogWithFunctionName()

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
