// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package raft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"ztna-core/ztna/logtrace"
	"net/http"

	"github.com/go-openapi/runtime"

	"ztna-core/ztna/controller/rest_model"
)

// RaftListMembersOKCode is the HTTP code returned for type RaftListMembersOK
const RaftListMembersOKCode int = 200

/*RaftListMembersOK A response to a raft list-members request

swagger:response raftListMembersOK
*/
type RaftListMembersOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.RaftMemberListResponse `json:"body,omitempty"`
}

// NewRaftListMembersOK creates RaftListMembersOK with default headers values
func NewRaftListMembersOK() *RaftListMembersOK {
    logtrace.LogWithFunctionName()

	return &RaftListMembersOK{}
}

// WithPayload adds the payload to the raft list members o k response
func (o *RaftListMembersOK) WithPayload(payload *rest_model.RaftMemberListResponse) *RaftListMembersOK {
    logtrace.LogWithFunctionName()
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the raft list members o k response
func (o *RaftListMembersOK) SetPayload(payload *rest_model.RaftMemberListResponse) {
    logtrace.LogWithFunctionName()
	o.Payload = payload
}

// WriteResponse to the client
func (o *RaftListMembersOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
    logtrace.LogWithFunctionName()

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RaftListMembersBadRequestCode is the HTTP code returned for type RaftListMembersBadRequest
const RaftListMembersBadRequestCode int = 400

/*RaftListMembersBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response raftListMembersBadRequest
*/
type RaftListMembersBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewRaftListMembersBadRequest creates RaftListMembersBadRequest with default headers values
func NewRaftListMembersBadRequest() *RaftListMembersBadRequest {
    logtrace.LogWithFunctionName()

	return &RaftListMembersBadRequest{}
}

// WithPayload adds the payload to the raft list members bad request response
func (o *RaftListMembersBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *RaftListMembersBadRequest {
    logtrace.LogWithFunctionName()
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the raft list members bad request response
func (o *RaftListMembersBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
    logtrace.LogWithFunctionName()
	o.Payload = payload
}

// WriteResponse to the client
func (o *RaftListMembersBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
    logtrace.LogWithFunctionName()

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RaftListMembersUnauthorizedCode is the HTTP code returned for type RaftListMembersUnauthorized
const RaftListMembersUnauthorizedCode int = 401

/*RaftListMembersUnauthorized The currently supplied session does not have the correct access rights to request this resource

swagger:response raftListMembersUnauthorized
*/
type RaftListMembersUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewRaftListMembersUnauthorized creates RaftListMembersUnauthorized with default headers values
func NewRaftListMembersUnauthorized() *RaftListMembersUnauthorized {
    logtrace.LogWithFunctionName()

	return &RaftListMembersUnauthorized{}
}

// WithPayload adds the payload to the raft list members unauthorized response
func (o *RaftListMembersUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *RaftListMembersUnauthorized {
    logtrace.LogWithFunctionName()
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the raft list members unauthorized response
func (o *RaftListMembersUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
    logtrace.LogWithFunctionName()
	o.Payload = payload
}

// WriteResponse to the client
func (o *RaftListMembersUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
    logtrace.LogWithFunctionName()

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RaftListMembersTooManyRequestsCode is the HTTP code returned for type RaftListMembersTooManyRequests
const RaftListMembersTooManyRequestsCode int = 429

/*RaftListMembersTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response raftListMembersTooManyRequests
*/
type RaftListMembersTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewRaftListMembersTooManyRequests creates RaftListMembersTooManyRequests with default headers values
func NewRaftListMembersTooManyRequests() *RaftListMembersTooManyRequests {
    logtrace.LogWithFunctionName()

	return &RaftListMembersTooManyRequests{}
}

// WithPayload adds the payload to the raft list members too many requests response
func (o *RaftListMembersTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *RaftListMembersTooManyRequests {
    logtrace.LogWithFunctionName()
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the raft list members too many requests response
func (o *RaftListMembersTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
    logtrace.LogWithFunctionName()
	o.Payload = payload
}

// WriteResponse to the client
func (o *RaftListMembersTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
    logtrace.LogWithFunctionName()

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
