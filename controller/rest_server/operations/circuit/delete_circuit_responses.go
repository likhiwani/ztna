// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package circuit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"ztna-core/ztna/logtrace"
	"net/http"

	"github.com/go-openapi/runtime"

	"ztna-core/ztna/controller/rest_model"
)

// DeleteCircuitOKCode is the HTTP code returned for type DeleteCircuitOK
const DeleteCircuitOKCode int = 200

/*DeleteCircuitOK The delete request was successful and the resource has been removed

swagger:response deleteCircuitOK
*/
type DeleteCircuitOK struct {

	/*
	  In: Body
	*/
	Payload *rest_model.Empty `json:"body,omitempty"`
}

// NewDeleteCircuitOK creates DeleteCircuitOK with default headers values
func NewDeleteCircuitOK() *DeleteCircuitOK {
    logtrace.LogWithFunctionName()

	return &DeleteCircuitOK{}
}

// WithPayload adds the payload to the delete circuit o k response
func (o *DeleteCircuitOK) WithPayload(payload *rest_model.Empty) *DeleteCircuitOK {
    logtrace.LogWithFunctionName()
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete circuit o k response
func (o *DeleteCircuitOK) SetPayload(payload *rest_model.Empty) {
    logtrace.LogWithFunctionName()
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteCircuitOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
    logtrace.LogWithFunctionName()

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteCircuitBadRequestCode is the HTTP code returned for type DeleteCircuitBadRequest
const DeleteCircuitBadRequestCode int = 400

/*DeleteCircuitBadRequest The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information

swagger:response deleteCircuitBadRequest
*/
type DeleteCircuitBadRequest struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewDeleteCircuitBadRequest creates DeleteCircuitBadRequest with default headers values
func NewDeleteCircuitBadRequest() *DeleteCircuitBadRequest {
    logtrace.LogWithFunctionName()

	return &DeleteCircuitBadRequest{}
}

// WithPayload adds the payload to the delete circuit bad request response
func (o *DeleteCircuitBadRequest) WithPayload(payload *rest_model.APIErrorEnvelope) *DeleteCircuitBadRequest {
    logtrace.LogWithFunctionName()
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete circuit bad request response
func (o *DeleteCircuitBadRequest) SetPayload(payload *rest_model.APIErrorEnvelope) {
    logtrace.LogWithFunctionName()
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteCircuitBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
    logtrace.LogWithFunctionName()

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteCircuitUnauthorizedCode is the HTTP code returned for type DeleteCircuitUnauthorized
const DeleteCircuitUnauthorizedCode int = 401

/*DeleteCircuitUnauthorized The currently supplied session does not have the correct access rights to request this resource

swagger:response deleteCircuitUnauthorized
*/
type DeleteCircuitUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewDeleteCircuitUnauthorized creates DeleteCircuitUnauthorized with default headers values
func NewDeleteCircuitUnauthorized() *DeleteCircuitUnauthorized {
    logtrace.LogWithFunctionName()

	return &DeleteCircuitUnauthorized{}
}

// WithPayload adds the payload to the delete circuit unauthorized response
func (o *DeleteCircuitUnauthorized) WithPayload(payload *rest_model.APIErrorEnvelope) *DeleteCircuitUnauthorized {
    logtrace.LogWithFunctionName()
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete circuit unauthorized response
func (o *DeleteCircuitUnauthorized) SetPayload(payload *rest_model.APIErrorEnvelope) {
    logtrace.LogWithFunctionName()
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteCircuitUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
    logtrace.LogWithFunctionName()

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteCircuitConflictCode is the HTTP code returned for type DeleteCircuitConflict
const DeleteCircuitConflictCode int = 409

/*DeleteCircuitConflict The resource requested to be removed/altered cannot be as it is referenced by another object.

swagger:response deleteCircuitConflict
*/
type DeleteCircuitConflict struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewDeleteCircuitConflict creates DeleteCircuitConflict with default headers values
func NewDeleteCircuitConflict() *DeleteCircuitConflict {
    logtrace.LogWithFunctionName()

	return &DeleteCircuitConflict{}
}

// WithPayload adds the payload to the delete circuit conflict response
func (o *DeleteCircuitConflict) WithPayload(payload *rest_model.APIErrorEnvelope) *DeleteCircuitConflict {
    logtrace.LogWithFunctionName()
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete circuit conflict response
func (o *DeleteCircuitConflict) SetPayload(payload *rest_model.APIErrorEnvelope) {
    logtrace.LogWithFunctionName()
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteCircuitConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
    logtrace.LogWithFunctionName()

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteCircuitTooManyRequestsCode is the HTTP code returned for type DeleteCircuitTooManyRequests
const DeleteCircuitTooManyRequestsCode int = 429

/*DeleteCircuitTooManyRequests The resource requested is rate limited and the rate limit has been exceeded

swagger:response deleteCircuitTooManyRequests
*/
type DeleteCircuitTooManyRequests struct {

	/*
	  In: Body
	*/
	Payload *rest_model.APIErrorEnvelope `json:"body,omitempty"`
}

// NewDeleteCircuitTooManyRequests creates DeleteCircuitTooManyRequests with default headers values
func NewDeleteCircuitTooManyRequests() *DeleteCircuitTooManyRequests {
    logtrace.LogWithFunctionName()

	return &DeleteCircuitTooManyRequests{}
}

// WithPayload adds the payload to the delete circuit too many requests response
func (o *DeleteCircuitTooManyRequests) WithPayload(payload *rest_model.APIErrorEnvelope) *DeleteCircuitTooManyRequests {
    logtrace.LogWithFunctionName()
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete circuit too many requests response
func (o *DeleteCircuitTooManyRequests) SetPayload(payload *rest_model.APIErrorEnvelope) {
    logtrace.LogWithFunctionName()
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteCircuitTooManyRequests) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {
    logtrace.LogWithFunctionName()

	rw.WriteHeader(429)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
