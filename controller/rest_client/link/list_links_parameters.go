// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package link

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"ztna-core/ztna/logtrace"
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListLinksParams creates a new ListLinksParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListLinksParams() *ListLinksParams {
    logtrace.LogWithFunctionName()
	return &ListLinksParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListLinksParamsWithTimeout creates a new ListLinksParams object
// with the ability to set a timeout on a request.
func NewListLinksParamsWithTimeout(timeout time.Duration) *ListLinksParams {
    logtrace.LogWithFunctionName()
	return &ListLinksParams{
		timeout: timeout,
	}
}

// NewListLinksParamsWithContext creates a new ListLinksParams object
// with the ability to set a context for a request.
func NewListLinksParamsWithContext(ctx context.Context) *ListLinksParams {
    logtrace.LogWithFunctionName()
	return &ListLinksParams{
		Context: ctx,
	}
}

// NewListLinksParamsWithHTTPClient creates a new ListLinksParams object
// with the ability to set a custom HTTPClient for a request.
func NewListLinksParamsWithHTTPClient(client *http.Client) *ListLinksParams {
    logtrace.LogWithFunctionName()
	return &ListLinksParams{
		HTTPClient: client,
	}
}

/* ListLinksParams contains all the parameters to send to the API endpoint
   for the list links operation.

   Typically these are written to a http.Request.
*/
type ListLinksParams struct {

	// Filter.
	Filter *string

	// Limit.
	Limit *int64

	// Offset.
	Offset *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list links params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListLinksParams) WithDefaults() *ListLinksParams {
    logtrace.LogWithFunctionName()
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list links params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListLinksParams) SetDefaults() {
    logtrace.LogWithFunctionName()
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list links params
func (o *ListLinksParams) WithTimeout(timeout time.Duration) *ListLinksParams {
    logtrace.LogWithFunctionName()
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list links params
func (o *ListLinksParams) SetTimeout(timeout time.Duration) {
    logtrace.LogWithFunctionName()
	o.timeout = timeout
}

// WithContext adds the context to the list links params
func (o *ListLinksParams) WithContext(ctx context.Context) *ListLinksParams {
    logtrace.LogWithFunctionName()
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list links params
func (o *ListLinksParams) SetContext(ctx context.Context) {
    logtrace.LogWithFunctionName()
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list links params
func (o *ListLinksParams) WithHTTPClient(client *http.Client) *ListLinksParams {
    logtrace.LogWithFunctionName()
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list links params
func (o *ListLinksParams) SetHTTPClient(client *http.Client) {
    logtrace.LogWithFunctionName()
	o.HTTPClient = client
}

// WithFilter adds the filter to the list links params
func (o *ListLinksParams) WithFilter(filter *string) *ListLinksParams {
    logtrace.LogWithFunctionName()
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the list links params
func (o *ListLinksParams) SetFilter(filter *string) {
    logtrace.LogWithFunctionName()
	o.Filter = filter
}

// WithLimit adds the limit to the list links params
func (o *ListLinksParams) WithLimit(limit *int64) *ListLinksParams {
    logtrace.LogWithFunctionName()
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list links params
func (o *ListLinksParams) SetLimit(limit *int64) {
    logtrace.LogWithFunctionName()
	o.Limit = limit
}

// WithOffset adds the offset to the list links params
func (o *ListLinksParams) WithOffset(offset *int64) *ListLinksParams {
    logtrace.LogWithFunctionName()
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list links params
func (o *ListLinksParams) SetOffset(offset *int64) {
    logtrace.LogWithFunctionName()
	o.Offset = offset
}

// WriteToRequest writes these params to a swagger request
func (o *ListLinksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {
    logtrace.LogWithFunctionName()

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filter != nil {

		// query param filter
		var qrFilter string

		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {

			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
