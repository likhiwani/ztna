// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package link

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"ztna-core/ztna/logtrace"
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new link API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
    logtrace.LogWithFunctionName()
	return &Client{transport: transport, formats: formats}
}

/*
Client for link API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteLink(params *DeleteLinkParams, opts ...ClientOption) (*DeleteLinkOK, error)

	DetailLink(params *DetailLinkParams, opts ...ClientOption) (*DetailLinkOK, error)

	ListLinks(params *ListLinksParams, opts ...ClientOption) (*ListLinksOK, error)

	PatchLink(params *PatchLinkParams, opts ...ClientOption) (*PatchLinkOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  DeleteLink deletes a link

  Delete a link by id. Requires admin access.
*/
func (a *Client) DeleteLink(params *DeleteLinkParams, opts ...ClientOption) (*DeleteLinkOK, error) {
    logtrace.LogWithFunctionName()
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteLink",
		Method:             "DELETE",
		PathPattern:        "/links/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteLinkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DetailLink retrieves a single link

  Retrieves a single link by id. Requires admin access.
*/
func (a *Client) DetailLink(params *DetailLinkParams, opts ...ClientOption) (*DetailLinkOK, error) {
    logtrace.LogWithFunctionName()
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetailLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "detailLink",
		Method:             "GET",
		PathPattern:        "/links/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DetailLinkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DetailLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for detailLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListLinks lists links

  Retrieves a list of link resources; does not supports filtering, sorting, or pagination. Requires admin access.

*/
func (a *Client) ListLinks(params *ListLinksParams, opts ...ClientOption) (*ListLinksOK, error) {
    logtrace.LogWithFunctionName()
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLinksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listLinks",
		Method:             "GET",
		PathPattern:        "/links",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListLinksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListLinksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listLinks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchLink updates the supplied fields on a link

  Update the supplied fields on a link. Requires admin access.
*/
func (a *Client) PatchLink(params *PatchLinkParams, opts ...ClientOption) (*PatchLinkOK, error) {
    logtrace.LogWithFunctionName()
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchLinkParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchLink",
		Method:             "PATCH",
		PathPattern:        "/links/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchLinkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchLinkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchLink: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
    logtrace.LogWithFunctionName()
	a.transport = transport
}
