// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright NetFoundry Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// __          __              _
// \ \        / /             (_)
//  \ \  /\  / /_ _ _ __ _ __  _ _ __   __ _
//   \ \/  \/ / _` | '__| '_ \| | '_ \ / _` |
//    \  /\  / (_| | |  | | | | | | | | (_| | : This file is generated, do not edit it.
//     \/  \/ \__,_|_|  |_| |_|_|_| |_|\__, |
//                                      __/ |
//                                     |___/

package raft

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"ztna-core/ztna/logtrace"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"ztna-core/ztna/controller/rest_model"
)

// RaftMemberRemoveReader is a Reader for the RaftMemberRemove structure.
type RaftMemberRemoveReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RaftMemberRemoveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
    logtrace.LogWithFunctionName()
	switch response.Code() {
	case 200:
		result := NewRaftMemberRemoveOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRaftMemberRemoveBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRaftMemberRemoveUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRaftMemberRemoveNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRaftMemberRemoveTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRaftMemberRemoveOK creates a RaftMemberRemoveOK with default headers values
func NewRaftMemberRemoveOK() *RaftMemberRemoveOK {
    logtrace.LogWithFunctionName()
	return &RaftMemberRemoveOK{}
}

/* RaftMemberRemoveOK describes a response with status code 200, with default header values.

Base empty response
*/
type RaftMemberRemoveOK struct {
	Payload *rest_model.Empty
}

func (o *RaftMemberRemoveOK) Error() string {
    logtrace.LogWithFunctionName()
	return fmt.Sprintf("[POST /raft/remove-member][%d] raftMemberRemoveOK  %+v", 200, o.Payload)
}
func (o *RaftMemberRemoveOK) GetPayload() *rest_model.Empty {
    logtrace.LogWithFunctionName()
	return o.Payload
}

func (o *RaftMemberRemoveOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
    logtrace.LogWithFunctionName()

	o.Payload = new(rest_model.Empty)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRaftMemberRemoveBadRequest creates a RaftMemberRemoveBadRequest with default headers values
func NewRaftMemberRemoveBadRequest() *RaftMemberRemoveBadRequest {
    logtrace.LogWithFunctionName()
	return &RaftMemberRemoveBadRequest{}
}

/* RaftMemberRemoveBadRequest describes a response with status code 400, with default header values.

The supplied request contains invalid fields or could not be parsed (json and non-json bodies). The error's code, message, and cause fields can be inspected for further information
*/
type RaftMemberRemoveBadRequest struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *RaftMemberRemoveBadRequest) Error() string {
    logtrace.LogWithFunctionName()
	return fmt.Sprintf("[POST /raft/remove-member][%d] raftMemberRemoveBadRequest  %+v", 400, o.Payload)
}
func (o *RaftMemberRemoveBadRequest) GetPayload() *rest_model.APIErrorEnvelope {
    logtrace.LogWithFunctionName()
	return o.Payload
}

func (o *RaftMemberRemoveBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
    logtrace.LogWithFunctionName()

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRaftMemberRemoveUnauthorized creates a RaftMemberRemoveUnauthorized with default headers values
func NewRaftMemberRemoveUnauthorized() *RaftMemberRemoveUnauthorized {
    logtrace.LogWithFunctionName()
	return &RaftMemberRemoveUnauthorized{}
}

/* RaftMemberRemoveUnauthorized describes a response with status code 401, with default header values.

The currently supplied session does not have the correct access rights to request this resource
*/
type RaftMemberRemoveUnauthorized struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *RaftMemberRemoveUnauthorized) Error() string {
    logtrace.LogWithFunctionName()
	return fmt.Sprintf("[POST /raft/remove-member][%d] raftMemberRemoveUnauthorized  %+v", 401, o.Payload)
}
func (o *RaftMemberRemoveUnauthorized) GetPayload() *rest_model.APIErrorEnvelope {
    logtrace.LogWithFunctionName()
	return o.Payload
}

func (o *RaftMemberRemoveUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
    logtrace.LogWithFunctionName()

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRaftMemberRemoveNotFound creates a RaftMemberRemoveNotFound with default headers values
func NewRaftMemberRemoveNotFound() *RaftMemberRemoveNotFound {
    logtrace.LogWithFunctionName()
	return &RaftMemberRemoveNotFound{}
}

/* RaftMemberRemoveNotFound describes a response with status code 404, with default header values.

The requested resource does not exist
*/
type RaftMemberRemoveNotFound struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *RaftMemberRemoveNotFound) Error() string {
    logtrace.LogWithFunctionName()
	return fmt.Sprintf("[POST /raft/remove-member][%d] raftMemberRemoveNotFound  %+v", 404, o.Payload)
}
func (o *RaftMemberRemoveNotFound) GetPayload() *rest_model.APIErrorEnvelope {
    logtrace.LogWithFunctionName()
	return o.Payload
}

func (o *RaftMemberRemoveNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
    logtrace.LogWithFunctionName()

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRaftMemberRemoveTooManyRequests creates a RaftMemberRemoveTooManyRequests with default headers values
func NewRaftMemberRemoveTooManyRequests() *RaftMemberRemoveTooManyRequests {
    logtrace.LogWithFunctionName()
	return &RaftMemberRemoveTooManyRequests{}
}

/* RaftMemberRemoveTooManyRequests describes a response with status code 429, with default header values.

The resource requested is rate limited and the rate limit has been exceeded
*/
type RaftMemberRemoveTooManyRequests struct {
	Payload *rest_model.APIErrorEnvelope
}

func (o *RaftMemberRemoveTooManyRequests) Error() string {
    logtrace.LogWithFunctionName()
	return fmt.Sprintf("[POST /raft/remove-member][%d] raftMemberRemoveTooManyRequests  %+v", 429, o.Payload)
}
func (o *RaftMemberRemoveTooManyRequests) GetPayload() *rest_model.APIErrorEnvelope {
    logtrace.LogWithFunctionName()
	return o.Payload
}

func (o *RaftMemberRemoveTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {
    logtrace.LogWithFunctionName()

	o.Payload = new(rest_model.APIErrorEnvelope)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
